diff --git a/configure.ac b/configure.ac
index ee18c72..6779f4b 100644
--- a/configure.ac
+++ b/configure.ac
@@ -4139,10 +4139,11 @@ fi
 if test "x$with_libstatgrab" = "xyes"
 then
   SAVE_CFLAGS="$CFLAGS"
-  SAVE_LDFLAGS="$LDFLAGS"
+  SAVE_LIBS="$LIBS"
 
   CFLAGS="$CFLAGS $with_libstatgrab_cflags"
   LDFLAGS="$LDFLAGS $with_libstatgrab_ldflags"
+  LIBS="-lstatgrab $LIBS"
 
   AC_CACHE_CHECK([if libstatgrab >= 0.90],
           [c_cv_have_libstatgrab_0_90],
@@ -4162,6 +4163,7 @@ then
 
   CFLAGS="$SAVE_CFLAGS"
   LDFLAGS="$SAVE_LDFLAGS"
+  LIBS="$SAVE_LIBS"
 fi
 
 AM_CONDITIONAL(BUILD_WITH_LIBSTATGRAB, test "x$with_libstatgrab" = "xyes")
diff -Naur collectd.orig/src/disk.c collectd/src/disk.c
--- collectd.orig/src/disk.c	2014-01-26 09:09:14.000000000 +0100
+++ collectd/src/disk.c	2015-02-13 15:08:03.000000000 +0100
@@ -128,11 +128,19 @@
 # error "No applicable input method."
 #endif
 
+#if HAVE_LIBUDEV
+#include <libudev.h>
+
+static char *conf_udev_name_attr = NULL;
+static struct udev *handle_udev;
+#endif
+
 static const char *config_keys[] =
 {
 	"Disk",
 	"UseBSDName",
-	"IgnoreSelected"
+	"IgnoreSelected",
+	"UdevNameAttr"
 };
 static int config_keys_num = STATIC_ARRAY_SIZE (config_keys);
 
@@ -165,6 +173,21 @@
         "on Mach / Mac OS X and will be ignored.");
 #endif
   }
+  else if (strcasecmp ("UdevNameAttr", key) == 0)
+  {
+#if HAVE_LIBUDEV
+    if (conf_udev_name_attr != NULL)
+    {
+      free (conf_udev_name_attr);
+      conf_udev_name_attr = NULL;
+    }
+    if ((conf_udev_name_attr = strdup (value)) == NULL)
+      return (1);
+#else
+    WARNING ("disk plugin: The \"UdevNameAttr\" option is only supported "
+        "if collectd is built with libudev support");
+#endif
+  }
   else
   {
     return (-1);
@@ -249,6 +272,48 @@
 } /* void disk_submit */
 
 #if KERNEL_LINUX
+static void submit_in_progress (char const *disk_name, gauge_t in_progress)
+{
+	value_t v;
+	value_list_t vl = VALUE_LIST_INIT;
+
+	if (ignorelist_match (ignorelist, disk_name) != 0)
+	  return;
+
+	v.gauge = in_progress;
+
+	vl.values = &v;
+	vl.values_len = 1;
+	sstrncpy (vl.host, hostname_g, sizeof (vl.host));
+	sstrncpy (vl.plugin, "disk", sizeof (vl.plugin));
+	sstrncpy (vl.plugin_instance, disk_name, sizeof (vl.plugin_instance));
+	sstrncpy (vl.type, "pending_operations", sizeof (vl.type));
+
+	plugin_dispatch_values (&vl);
+}
+
+static void submit_io_time (char const *plugin_instance, derive_t io_time, derive_t weighted_time)
+{
+	value_t values[2];
+	value_list_t vl = VALUE_LIST_INIT;
+
+	if (ignorelist_match (ignorelist, plugin_instance) != 0)
+	  return;
+
+	values[0].derive = io_time;
+	values[1].derive = weighted_time;
+
+	vl.values = values;
+	vl.values_len = 2;
+	sstrncpy (vl.host, hostname_g, sizeof (vl.host));
+	sstrncpy (vl.plugin, "disk", sizeof (vl.plugin));
+	sstrncpy (vl.plugin_instance, plugin_instance, sizeof (vl.plugin_instance));
+	sstrncpy (vl.type, "disk_io_time", sizeof (vl.type));
+
+	plugin_dispatch_values (&vl);
+}
+
+
 static counter_t disk_calc_time_incr (counter_t delta_time, counter_t delta_ops)
 {
 	double interval = CDTIME_T_TO_DOUBLE (plugin_get_interval ());
@@ -259,6 +324,34 @@
 }
 #endif
 
+#if HAVE_LIBUDEV
+/**
+ * Attempt to provide an rename disk instance from an assigned udev attribute.
+ *
+ * On success, it returns a strduped char* to the desired attribute value.
+ * Otherwise it returns NULL.
+ */
+
+static char *disk_udev_attr_name (struct udev *udev, char *disk_name, const char *attr)
+{
+	struct udev_device *dev;
+	const char *prop;
+	char *output = NULL;
+
+	dev = udev_device_new_from_subsystem_sysname (udev, "block", disk_name);
+	if (dev != NULL)
+	{
+		prop = udev_device_get_property_value (dev, attr);
+		if (prop) {
+			output = strdup (prop);
+			DEBUG ("disk plugin: renaming %s => %s", disk_name, output);
+		}
+		udev_device_unref (dev);
+	}
+	return output;
+}
+#endif
+
 #if HAVE_IOKIT_IOKITLIB_H
 static signed long long dict_get_value (CFDictionaryRef dict, const char *key)
 {
@@ -488,6 +581,9 @@
 	derive_t write_ops     = 0;
 	derive_t write_merged  = 0;
 	derive_t write_time    = 0;
+	gauge_t in_progress    = NAN;
+	derive_t io_time       = 0;
+	derive_t weighted_time = 0;
 	int is_disk = 0;
 
 	diskstats_t *ds, *pre_ds;
@@ -505,9 +601,15 @@
 		fieldshift = 1;
 	}
 
+#if HAVE_LIBUDEV
+	handle_udev = udev_new();
+#endif
+
 	while (fgets (buffer, sizeof (buffer), fh) != NULL)
 	{
 		char *disk_name;
+		char *output_name;
+		char *alt_name;
 
 		numfields = strsplit (buffer, fields, 32);
 
@@ -563,6 +665,11 @@
 				read_time    = atoll (fields[6 + fieldshift]);
 				write_merged = atoll (fields[8 + fieldshift]);
 				write_time   = atoll (fields[10+ fieldshift]);
+
+				in_progress = atof (fields[11 + fieldshift]);
+
+				io_time       = atof (fields[12 + fieldshift]);
+				weighted_time = atof (fields[13 + fieldshift]);
 			}
 		}
 		else
@@ -659,25 +766,45 @@
 			continue;
 		}
 
+		output_name = disk_name;
+
+#if HAVE_LIBUDEV
+		alt_name = disk_udev_attr_name (handle_udev, disk_name,
+				conf_udev_name_attr);
+#else
+		alt_name = NULL;
+#endif
+		if (alt_name != NULL)
+			output_name = alt_name;
+
 		if ((ds->read_bytes != 0) || (ds->write_bytes != 0))
-			disk_submit (disk_name, "disk_octets",
+			disk_submit (output_name, "disk_octets",
 					ds->read_bytes, ds->write_bytes);
 
 		if ((ds->read_ops != 0) || (ds->write_ops != 0))
-			disk_submit (disk_name, "disk_ops",
+			disk_submit (output_name, "disk_ops",
 					read_ops, write_ops);
 
 		if ((ds->avg_read_time != 0) || (ds->avg_write_time != 0))
-			disk_submit (disk_name, "disk_time",
+			disk_submit (output_name, "disk_time",
 					ds->avg_read_time, ds->avg_write_time);
 
 		if (is_disk)
 		{
-			disk_submit (disk_name, "disk_merged",
+			disk_submit (output_name, "disk_merged",
 					read_merged, write_merged);
+			submit_in_progress (output_name, in_progress);
+			submit_io_time (output_name, io_time, weighted_time);
 		} /* if (is_disk) */
+
+		/* release udev-based alternate name, if allocated */
+		free(alt_name);
 	} /* while (fgets (buffer, sizeof (buffer), fh) != NULL) */
 
+#if HAVE_LIBUDEV
+	udev_unref(handle_udev);
+#endif
+
 	fclose (fh);
 /* #endif defined(KERNEL_LINUX) */
 
@@ -732,7 +859,12 @@
 
 #elif defined(HAVE_LIBSTATGRAB)
 	sg_disk_io_stats *ds;
-	int disks, counter;
+# if HAVE_LIBSTATGRAB_0_90
+	size_t disks;
+# else
+	int disks;
+#endif
+	int counter;
 	char name[DATA_MAX_NAME_LEN];
 	
 	if ((ds = sg_get_disk_io_stats(&disks)) == NULL)
