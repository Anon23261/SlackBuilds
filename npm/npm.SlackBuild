#!/bin/sh
#
# Slackware build script for nmp.js
#
# Copyright 2014-2015 Corrado Franco (http://conraid.net)
#
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Latest version of this SlackBuild at http://slackers.it/repository

# Exit on most errors
set -eu

# Set variables:
CWD=$(pwd)

PRGNAME=${PRGNAME:-npm}
PKGNAME=$(echo ${PRGNAME} | tr A-Z a-z)
VERSION=${VERSION:-2.12.0}
PKGVERSION=${VERSION//-/_}
BUILD=${BUILD:-1}
TAG=${TAG:-cf}
TMP=${TMP:-/tmp/pkg}
PKG=${TMP}/package-${PKGNAME}
PKGDOCDIR="${PKG}/usr/doc/${PKGNAME}-${PKGVERSION}"

# Insert document files in this variable
DOCFILES="AUTHORS CHANGELOG* CONTRIBUTING* LICENSE README* doc/*"

# Automatically determine the architecture we're building on:
if [ -z ${ARCH:=""} ]; then
    case "$( uname -m )" in
    i?86) ARCH=i686 ;;
    arm*) ARCH=arm ;;
    # Unless ${ARCH} is already set, use uname -m for all other archs:
    *) ARCH=$( uname -m ) ;;
    esac
fi

# Set compiling FLAGS
case "${ARCH}" in
    i[3-5]86)
    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"; CHOST="i486"
    SLKLDFLAGS=""; LIBDIRSUFFIX=""
    ;;
    i686)
    SLKCFLAGS="-O2 -march=i686 -fomit-frame-pointer"; CHOST="i486"
    SLKLDFLAGS=""; LIBDIRSUFFIX=""
    ;;
    x86_64)
    SLKCFLAGS="-O2 -fPIC -fomit-frame-pointer"; CHOST="x86_64"
    SLKLDFLAGS="-L/lib64 -L/usr/lib64"; LIBDIRSUFFIX="64"
    ;;
    *)
    SLKCFLAGS="-O2"; CHOST=${ARCH}
    SLKLDFLAGS=""; LIBDIRSUFFIX=""
    ;;
esac

# Extract source and prepare:
rm -rf ${PKG}
mkdir -p ${TMP} ${PKG}
cd ${TMP}
rm -rf ${PRGNAME}-${VERSION}
tar xvf ${CWD}/${PRGNAME}-${VERSION}.tar.gz || tar xvf ${CWD}/v${VERSION}.tar.gz
cd ${PRGNAME}-${VERSION}

# Make sure ownerships and permissions are sane:
chown -R root:root .
chmod -R u+w,go+r-w,a-s .

# Fix man page path.
sed '/var manRoot/ s|"share",||' -i lib/{,un}build.js

# Fix libdir for 64-bit.
sed "s|\"lib\"|\"lib${LIBDIRSUFFIX}\"|" -i lib/npm.js

# Install:
make DESTDIR=${PKG} install

# Strip binaries:
find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
find ${PKG} | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs -r strip -g 2> /dev/null || true

# Fix files owned by nobody:
chown -R root:root ${PKG}/usr/lib${LIBDIRSUFFIX}/node_modules

# Make symbolic link of node-gyp
ln -s /usr/lib${LIBDIRSUFFIX}/node_modules/npm/bin/node-gyp-bin/node-gyp ${PKG}/usr/bin/node-gyp

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/lib${LIBDIRSUFFIX}/node_modules/npm/man/ ]; then
    find ${PKG}/usr/lib${LIBDIRSUFFIX}/node_modules/npm/man/ -type f -exec gzip -9 {} \;
fi

# Fix symbolic link of npm man pages
rm -f ${PKG}/usr/man/{man1,man3,man5,man7}/*
for DIR in man1 man3 man5 man7; do
    cd ${PKG}/usr/lib${LIBDIRSUFFIX}/node_modules/npm/man/$DIR
    for FILE in *; do
        ln -s /usr/lib${LIBDIRSUFFIX}/node_modules/npm/man/$DIR/$FILE ${PKG}/usr/man/$DIR/
    done
    cd -
done

# Remove unneeded files.
find ${PKG}/usr \( -name '.git*' -o -name '.travis.yml' \) -exec rm -f {} \;

# Add bash completion file
install -D -m 644 lib/utils/completion.sh ${PKG}/etc/bash_completion.d/npm

# Add a documentation directory:
mkdir -p ${PKGDOCDIR}
cp -a ${DOCFILES} ${PKGDOCDIR} || true

# Add a slackbuild script:
install -Dm644 ${CWD}/${PKGNAME}.SlackBuild ${PKGDOCDIR}/${PKGNAME}.SlackBuild

# Add slack-desc
install -Dm644 ${CWD}/slack-desc ${PKG}/install/slack-desc

# Create package:
cd ${PKG}
/sbin/makepkg -l y -c n ${CWD}/${PKGNAME}-${PKGVERSION}-${ARCH}-${BUILD}${TAG}.txz
