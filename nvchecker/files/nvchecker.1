.\" Man page generated from reStructuredText.
.
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.TH "NVCHECKER" 1 "2023-08-27" "2.12" ""
.SH NAME
nvchecker \- New version checker for software releases
.sp
\fBnvchecker\fP (short for \fInew version checker\fP) is for checking if a new version of some software has been released.
.sp
This is the version 2.0 branch. For the old version 1.x, please switch to the \fBv1.x\fP branch.
\fI\%\fP\fI\%\fP
.SH DEPENDENCY
.INDENT 0.0
.IP \(bu 2
Python 3.7+
.IP \(bu 2
Python library: structlog, platformdirs, tomli (on Python < 3.11)
.IP \(bu 2
One of these Python library combinations (ordered by preference):
.INDENT 2.0
.IP \(bu 2
tornado + pycurl
.IP \(bu 2
aiohttp
.IP \(bu 2
httpx with http2 support (experimental; only latest version is supported)
.IP \(bu 2
tornado
.UNINDENT
.IP \(bu 2
All commands used in your software version configuration files
.UNINDENT
.SH INSTALL AND RUN
.sp
To install:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
pip3 install nvchecker
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To use the latest code, you can also clone this repository and run:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
python3 setup.py install
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To see available options:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
nvchecker \-\-help
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Run with one or more software version files:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
nvchecker \-c config_file.toml
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
A simple config file may look like:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[nvchecker]
source = "github"
github = "lilydjwg/nvchecker"

[python\-toml]
source = "pypi"
pypi = "toml"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You normally will like to specify some "version record files"; see below.
.SS JSON logging
.sp
With \fB\-\-logger=json\fP or \fB\-\-logger=both\fP, you can get a structured logging
for programmatically consuming. You can use \fB\-\-json\-log\-fd=FD\fP to specify the
file descriptor to send logs to (take care to do line buffering). The logging
level option (\fB\-l\fP or \fB\-\-logging\fP) doesn\(aqt take effect with this.
.sp
The JSON log is one JSON string per line. The following documented events and
fields are stable, undocumented ones may change without notice.
.INDENT 0.0
.TP
.B event=updated
An update is detected. Fields \fBname\fP, \fBold_version\fP and \fBversion\fP are
available. \fBold_version\fP maybe \fBnull\fP\&.
.TP
.B event=up\-to\-date
There is no update. Fields \fBname\fP and \fBversion\fP are available.
.TP
.B event=no\-result
No version is detected. There may be an error. Fields \fBname\fP is available.
.TP
.B level=error
There is an error. Fields \fBname\fP and \fBexc_info\fP may be available to give
further information.
.UNINDENT
.SS Upgrade from 1.x version
.sp
There are several backward\-incompatible changes from the previous 1.x version.
.INDENT 0.0
.IP 1. 3
Version 2.x requires Python 3.7+ to run.
.IP 2. 3
The command syntax changes a bit. You need to use a \fB\-c\fP switch to specify your software version configuration file (or use the default).
.IP 3. 3
The configuration file format has been changed from ini to \fI\%toml\fP\&. You can use the \fBnvchecker\-ini2toml\fP script to convert your old configuration files. However, comments and formatting will be lost, and some options may not be converted correctly.
.IP 4. 3
Several options have been renamed. \fBmax_concurrent\fP to \fBmax_concurrency\fP, and all option names have their \fB\-\fP be replaced with \fB_\fP\&.
.IP 5. 3
All software configuration tables need a \fBsource\fP option to specify which source is to be used rather than being figured out from option names in use. This enables additional source plugins to be discovered.
.IP 6. 3
The version record files have been changed to use JSON format (the old format will be converted on writing).
.IP 7. 3
The \fBvcs\fP source is removed. (It\(aqs available inside \fI\%lilac\fP at the moment.) A \fBgit\fP source is provided.
.IP 8. 3
\fBinclude_tags_pattern\fP and \fBignored_tags\fP are removed. Use \fI\%List Options\fP instead.
.UNINDENT
.SH VERSION RECORD FILES
.sp
Version record files record which version of the software you know or is available. They are a simple JSON object mapping software names to known versions.
.SS The \fBnvtake\fP Command
.sp
This command helps to manage version record files. It reads both old and new version record files, and a list of names given on the commandline. It then update the versions of those names in the old version record file.
.sp
This helps when you have known (and processed) some of the updated software, but not all. You can tell nvchecker that via this command instead of editing the file by hand.
.sp
This command will help most if you specify where you version record files are in your config file. See below for how to use a config file.
.SS The \fBnvcmp\fP Command
.sp
This command compares the \fBnewver\fP file with the \fBoldver\fP one and prints out any differences as updates, e.g.:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ nvcmp \-c sample_source.toml
Sparkle Test App None \-> 2.0
test 0.0 \-> 0.1
.ft P
.fi
.UNINDENT
.UNINDENT
.SH CONFIGURATION FILES
.sp
The software version source files are in \fI\%toml\fP format. The \fIkey name\fP is the name of the software. Following fields are used to tell nvchecker how to determine the current version of that software.
.sp
See \fI\%sample_source.toml\fP for an example.
.SS Configuration Table
.sp
A special table named \fB__config__\fP provides some configuration options.
.sp
Relative path are relative to the source files, and \fB~\fP and environmental variables are expanded.
.sp
Currently supported options are:
.INDENT 0.0
.TP
.B oldver
Specify a version record file containing the old version info.
.TP
.B newver
Specify a version record file to store the new version info.
.TP
.B proxy
The HTTP proxy to use. The format is \fBproto://host:port\fP, e.g. \fBhttp://localhost:8087\fP\&. Different backends have different level support for this, e.g. with \fBpycurl\fP you can use \fBsocks5h://host:port\fP proxies.
.TP
.B max_concurrency
Max number of concurrent jobs. Default: 20.
.TP
.B http_timeout
Time in seconds to wait for HTTP requests. Default: 20.
.TP
.B keyfile
Specify a toml config file containing key (token) information. This file
should contain a \fBkeys\fP table, mapping key names to key values. See
specific source for the key name(s) to use.
.sp
Sample \fBkeyfile.toml\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[keys]
# https://github.com/settings/tokens
# scope: repo \-> public_repo
github = "ghp_<stripped>"
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS Global Options
.sp
The following options apply to every check sources. You can use them in any
item in your configuration file.
.INDENT 0.0
.TP
.B prefix
Strip the prefix string if the version string starts with it. Otherwise the
version string is returned as\-is.
.TP
.B from_pattern, to_pattern
Both are Python\-compatible regular expressions. If \fBfrom_pattern\fP is found
in the version string, it will be replaced with \fBto_pattern\fP\&.
.sp
If \fBfrom_pattern\fP is not found, the version string remains unchanged and no
error is emitted.
.TP
.B missing_ok
Suppress warnings and errors if a version checking module finds nothing.
Currently only \fBregex\fP supports it.
.TP
.B proxy
The HTTP proxy to use. The format is \fBproto://host:port\fP, e.g.
\fBhttp://localhost:8087\fP\&. Different backends have different level support
for this, e.g. with \fBpycurl\fP you can use \fBsocks5h://host:port\fP proxies.
.sp
Set it to \fB""\fP (empty string) to override the global setting.
.sp
This only works when the source implementation uses the builtin HTTP client,
and doesn\(aqt work with the \fBaur\fP source because it\(aqs batched (however the
global proxy config still applies).
.TP
.B user_agent
The user agent string to use for HTTP requests.
.TP
.B tries
Try specified times when a network error occurs. Default is \fB1\fP\&.
.sp
This only works when the source implementation uses the builtin HTTP client.
.TP
.B httptoken
A personal authorization token used to fetch the url with the \fBAuthorization\fP header.
The type of token depends on the authorization required.
.INDENT 7.0
.IP \(bu 2
For Bearer token set : \fBBearer <Your_bearer_token>\fP
.IP \(bu 2
For Basic token set : \fBBasic <Your_base64_encoded_token>\fP
.UNINDENT
.sp
In the keyfile add \fBhttptoken_{name}\fP token.
.TP
.B verify_cert
Whether to verify the HTTPS certificate or not. Default is \fBtrue\fP\&.
.UNINDENT
.sp
If both \fBprefix\fP and \fBfrom_pattern\fP/\fBto_pattern\fP are used,
\fBfrom_pattern\fP/\fBto_pattern\fP are ignored. If you want to strip the prefix
and then do something special, just use \fBfrom_pattern\fP/\fBto_pattern\fP\&. For
example, the transformation of \fBv1_1_0\fP => \fB1.1.0\fP can be achieved with
\fBfrom_pattern = \(aqv(\ed+)_(\ed+)_(\ed+)\(aq\fP and \fBto_pattern = \(aq\e1.\e2.\e3\(aq\fP\&.
(Note that in TOML it\(aqs easiler to write regexes in single quotes so you don\(aqt need to escape \fB\e\fP\&.)
.SS List Options
.sp
The following options apply to sources that return a list. See
individual source tables to determine whether they are
supported.
.INDENT 0.0
.TP
.B include_regex
Only consider version strings that match the given regex. The whole string
should match the regex. Be sure to use \fB\&.*\fP when you mean it!
.TP
.B exclude_regex
Don\(aqt consider version strings that match the given regex. The whole string
should match the regex. Be sure to use \fB\&.*\fP when you mean it! This option
has higher precedence that \fBinclude_regex\fP; that is, if matched by this
one, it\(aqs excluded even it\(aqs also matched by \fBinclude_regex\fP\&.
.TP
.B sort_version_key
Sort the version string using this key function. Choose among
\fBparse_version\fP, \fBvercmp\fP and \fBawesomeversion\fP\&. Default value is
\fBparse_version\fP\&. \fBparse_version\fP uses an old version of
\fBpkg_resources.parse_version\fP\&. \fBvercmp\fP uses \fBpyalpm.vercmp\fP\&.
\fBawesomeversion\fP uses \fI\%awesomeversion\fP\&.
.TP
.B ignored
Version strings that are explicitly ignored, separated by whitespace. This
can be useful to avoid some known mis\-named versions, so newer ones won\(aqt be
"overridden" by the old broken ones.
.UNINDENT
.SS Search in a Webpage
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
source = "regex"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Search through a specific webpage for the version string. This type of version finding has these fields:
.INDENT 0.0
.TP
.B url
The URL of the webpage to fetch.
.TP
.B encoding
(\fIOptional\fP) The character encoding of the webpage, if \fBlatin1\fP is not appropriate.
.TP
.B regex
A regular expression used to find the version string.
.sp
It can have zero or one capture group. The capture group or the whole match is the version string.
.sp
When multiple version strings are found, the maximum of those is chosen.
.TP
.B post_data
(\fIOptional\fP) When present, a \fBPOST\fP request (instead of a \fBGET\fP) will be used. The value should be a string containing the full body of the request. The encoding of the string can be specified using the \fBpost_data_type\fP option.
.TP
.B post_data_type
(\fIOptional\fP) Specifies the \fBContent\-Type\fP of the request body (\fBpost_data\fP). By default, this is \fBapplication/x\-www\-form\-urlencoded\fP\&.
.UNINDENT
.sp
This source supports \fI\%List Options\fP\&.
.SS Search in an HTTP header
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
source = "httpheader"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Send an HTTP request and search through a specific header.
.INDENT 0.0
.TP
.B url
The URL of the HTTP request.
.TP
.B header
(\fIOptional\fP) The header to look at. Default is \fBLocation\fP\&. Another useful header is \fBContent\-Disposition\fP\&.
.TP
.B regex
A regular expression used to find the version string.
.sp
It can have zero or one capture group. The capture group or the whole match is the version string.
.sp
When multiple version strings are found, the maximum of those is chosen.
.TP
.B method
(\fIOptional\fP) The HTTP method to use. Default is \fBHEAD\fP\&.
.TP
.B follow_redirects
(\fIOptional\fP) Whether to follow 3xx HTTP redirects. Default is \fBfalse\fP\&. If you are looking at a \fBLocation\fP header, you shouldn\(aqt change this.
.UNINDENT
.SS Search with an HTML Parser
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
source = "htmlparser"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Send an HTTP request and search through the body a specific xpath.
.INDENT 0.0
.TP
.B url
The URL of the HTTP request.
.TP
.B xpath
An xpath expression used to find the version string.
.TP
.B post_data
(\fIOptional\fP) When present, a \fBPOST\fP request (instead of a \fBGET\fP) will be used. The value should be a string containing the full body of the request. The encoding of the string can be specified using the \fBpost_data_type\fP option.
.TP
.B post_data_type
(\fIOptional\fP) Specifies the \fBContent\-Type\fP of the request body (\fBpost_data\fP). By default, this is \fBapplication/x\-www\-form\-urlencoded\fP\&.
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
An additional dependency "lxml" is required.
You can use \fBpip install \(aqnvchecker[htmlparser]\(aq\fP\&.
.UNINDENT
.UNINDENT
.SS Find with a Command
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
source = "cmd"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Use a shell command line to get the version. The output is striped first, so trailing newlines do not bother.
.INDENT 0.0
.TP
.B cmd
The command line to use. This will run with the system\(aqs standard shell (i.e. \fB/bin/sh\fP).
.UNINDENT
.SS Check AUR
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
source = "aur"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Check \fI\%Arch User Repository\fP for updates.
Per\-item proxy setting doesn\(aqt work for this because several items will be
batched into one request.
.INDENT 0.0
.TP
.B aur
The package name in AUR. If empty, use the name of software (the \fItable name\fP).
.TP
.B strip_release
Strip the release part.
.TP
.B use_last_modified
Append last modified time to the version.
.UNINDENT
.SS Check GitHub
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
source = "github"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Check \fI\%GitHub\fP for updates. The version returned is in
date format \fB%Y%m%d.%H%M%S\fP, e.g. \fB20130701.012212\fP, unless \fBuse_latest_release\fP
or \fBuse_max_tag\fP is used. See below.
.INDENT 0.0
.TP
.B github
The github repository, with author, e.g. \fBlilydjwg/nvchecker\fP\&.
.TP
.B branch
Which branch to track? Default: the repository\(aqs default.
.TP
.B path
Only commits containing this file path will be returned.
.TP
.B use_latest_release
Set this to \fBtrue\fP to check for the latest release on GitHub.
.sp
GitHub releases are not the same with git tags. You\(aqll see big version names
and descriptions in the release page for such releases, e.g.
\fI\%zfsonlinux/zfs\(aqs\fP, and those
small ones like \fI\%nvchecker\(aqs\fP
are only git tags that should use \fBuse_max_tag\fP below.
.sp
Will return the release name instead of date.
.TP
.B use_latest_tag
Set this to \fBtrue\fP to check for the latest tag on GitHub.
.sp
This requires a token because it\(aqs using the v4 GraphQL API.
.TP
.B query
When \fBuse_latest_tag\fP is \fBtrue\fP, this sets a query for the tag. The exact
matching method is not documented by GitHub.
.TP
.B use_max_tag
Set this to \fBtrue\fP to check for the max tag on GitHub. Unlike
\fBuse_latest_release\fP, this option includes both annotated tags and
lightweight ones, and return the largest one sorted by the
\fBsort_version_key\fP option. Will return the tag name instead of date.
.TP
.B token
A personal authorization token used to call the API.
.UNINDENT
.sp
An authorization token may be needed in order to use \fBuse_latest_tag\fP or to
request more frequently than anonymously.
.sp
To set an authorization token, you can set:
.INDENT 0.0
.IP \(bu 2
a key named \fBgithub\fP in the keyfile
.IP \(bu 2
the token option
.UNINDENT
.sp
This source supports \fI\%List Options\fP when \fBuse_max_tag\fP is set.
.SS Check Gitea
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
source = "gitea"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Check \fI\%Gitea\fP for updates. The version returned is in date format \fB%Y%m%d\fP, e.g. \fB20130701\fP,
unless \fBuse_max_tag\fP is used. See below.
.INDENT 0.0
.TP
.B gitea
The gitea repository, with author, e.g. \fBgitea/tea\fP\&.
.TP
.B branch
Which branch to track? Default: the repository\(aqs default.
.TP
.B use_max_tag
Set this to \fBtrue\fP to check for the max tag on Gitea. Will return the biggest one
sorted by old \fBpkg_resources.parse_version\fP\&. Will return the tag name instead of date.
.TP
.B host
Hostname for self\-hosted Gitea instance.
.TP
.B token
Gitea authorization token used to call the API.
.UNINDENT
.sp
To set an authorization token, you can set:
.INDENT 0.0
.IP \(bu 2
a key named \fBgitea_{host}\fP in the keyfile, where \fBhost\fP is all\-lowercased host name
.IP \(bu 2
the token option
.UNINDENT
.sp
This source supports \fI\%List Options\fP when \fBuse_max_tag\fP is set.
.SS Check BitBucket
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
source = "bitbucket"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Check \fI\%BitBucket\fP for updates. The version returned
is in date format \fB%Y%m%d\fP, e.g. \fB20130701\fP, unless \fBuse_max_tag\fP is used. See below.
.INDENT 0.0
.TP
.B bitbucket
The bitbucket repository, with author, e.g. \fBlilydjwg/dotvim\fP\&.
.TP
.B branch
Which branch to track? Default: the repository\(aqs default.
.TP
.B use_max_tag
Set this to \fBtrue\fP to check for the max tag on BitBucket. Will return the biggest one
sorted by old \fBpkg_resources.parse_version\fP\&. Will return the tag name instead of date.
.TP
.B use_sorted_tags
If \fBtrue\fP, tags are queried and sorted according to the \fBquery\fP and
\fBsort\fP keys. Will return the tag name instead of the date.
.TP
.B query
A query string use to filter tags when \fBuse_sorted_tags\fP set (see
\fI\%here\fP
for examples). The string does not need to be escaped.
.TP
.B sort
A field used to sort the tags when \fBuse_sorted_tags\fP is set (see
\fI\%here\fP
for examples). Defaults to \fB\-target.date\fP (sorts tags in descending order
by date).
.TP
.B max_page
How many pages do we search for the max tag? Default is 3. This works when
\fBuse_max_tag\fP is set.
.UNINDENT
.sp
This source supports \fI\%List Options\fP when \fBuse_max_tag\fP or
\fBuse_sorted_tags\fP is set.
.SS Check GitLab
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
source = "gitlab"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Check \fI\%GitLab\fP for updates. The version returned is in date format \fB%Y%m%d\fP, e.g. \fB20130701\fP,
unless \fBuse_max_tag\fP is used. See below.
.INDENT 0.0
.TP
.B gitlab
The gitlab repository, with author, e.g. \fBDeepin/deepin\-music\fP\&.
.TP
.B branch
Which branch to track?
.TP
.B use_max_tag
Set this to \fBtrue\fP to check for the max tag on GitLab. Will return the biggest one
sorted by old \fBpkg_resources.parse_version\fP\&. Will return the tag name instead of date.
.TP
.B host
Hostname for self\-hosted GitLab instance.
.TP
.B token
GitLab authorization token used to call the API.
.UNINDENT
.sp
To set an authorization token, you can set:
.INDENT 0.0
.IP \(bu 2
a key named \fBgitlab_{host}\fP in the keyfile, where \fBhost\fP is all\-lowercased host name
.IP \(bu 2
the token option
.UNINDENT
.sp
This source supports \fI\%List Options\fP when \fBuse_max_tag\fP is set.
.SS Check PyPI
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
source = "pypi"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Check \fI\%PyPI\fP for updates.
.INDENT 0.0
.TP
.B pypi
The name used on PyPI, e.g. \fBPySide\fP\&.
.TP
.B use_pre_release
Whether to accept pre release. Default is false.
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
An additional dependency "packaging" is required.
You can use \fBpip install \(aqnvchecker[pypi]\(aq\fP\&.
.UNINDENT
.UNINDENT
.SS Check RubyGems
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
source = "gems"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Check \fI\%RubyGems\fP for updates.
.INDENT 0.0
.TP
.B gems
The name used on RubyGems, e.g. \fBsass\fP\&.
.UNINDENT
.sp
This source supports \fI\%List Options\fP\&.
.SS Check NPM Registry
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
source = "npm"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Check \fI\%NPM Registry\fP for updates.
.INDENT 0.0
.TP
.B npm
The name used on NPM Registry, e.g. \fBcoffee\-script\fP\&.
.UNINDENT
.sp
To configure which registry to query, a source plugin option is available.
You can specify like this:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[__config__.source.npm]
registry = "https://registry.npm.taobao.org"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Check Hackage
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
source = "hackage"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Check \fI\%Hackage\fP for updates.
.INDENT 0.0
.TP
.B hackage
The name used on Hackage, e.g. \fBpandoc\fP\&.
.UNINDENT
.SS Check CPAN
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
source = "cpan"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Check \fI\%MetaCPAN\fP for updates.
.INDENT 0.0
.TP
.B cpan
The name used on CPAN, e.g. \fBYAML\fP\&.
.UNINDENT
.SS Check CRAN
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
source = "cran"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Check \fI\%CRAN\fP for updates.
.INDENT 0.0
.TP
.B cran
The name used on CRAN, e.g. \fBxml2\fP\&.
.UNINDENT
.SS Check Packagist
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
source = "packagist"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Check \fI\%Packagist\fP for updates.
.INDENT 0.0
.TP
.B packagist
The name used on Packagist, e.g. \fBmonolog/monolog\fP\&.
.UNINDENT
.SS Check crates.io
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
source = "cratesio"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Check \fI\%crates.io\fP for updates.
.INDENT 0.0
.TP
.B cratesio
The crate name on crates.io, e.g. \fBtokio\fP\&.
.UNINDENT
.SS Check Local Pacman Database
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
source = "pacman"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This is used when you run \fBnvchecker\fP on an Arch Linux system and the program always keeps up with a package in your configured repositories for \fI\%Pacman\fP\&.
.INDENT 0.0
.TP
.B pacman
The package name to reference to.
.TP
.B strip_release
Strip the release part.
.UNINDENT
.SS Check Arch Linux official packages
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
source = "archpkg"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This enables you to track the update of \fI\%Arch Linux official packages\fP, without needing of pacman and an updated local Pacman databases.
.INDENT 0.0
.TP
.B archpkg
Name of the Arch Linux package.
.TP
.B strip_release
Strip the release part, only return part before \fB\-\fP\&.
.TP
.B provided
Instead of the package version, return the version this package provides. Its value is what the package provides, and \fBstrip_release\fP takes effect too. This is best used with libraries.
.UNINDENT
.SS Check Debian Linux official packages
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
source = "debianpkg"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This enables you to track the update of \fI\%Debian Linux official packages\fP, without needing of apt and an updated local APT database.
.INDENT 0.0
.TP
.B debianpkg
Name of the Debian Linux source package.
.TP
.B suite
Name of the Debian release (jessie, wheezy, etc, defaults to sid)
.TP
.B strip_release
Strip the release part.
.UNINDENT
.SS Check Ubuntu Linux official packages
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
source = "ubuntupkg"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This enables you to track the update of \fI\%Ubuntu Linux official packages\fP, without needing of apt and an updated local APT database.
.INDENT 0.0
.TP
.B ubuntupkg
Name of the Ubuntu Linux source package.
.TP
.B suite
Name of the Ubuntu release (xenial, zesty, etc, defaults to None, which means no limit on suite)
.TP
.B strip_release
Strip the release part.
.UNINDENT
.SS Check Repology
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
source = "repology"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This enables you to track updates from \fI\%Repology\fP (repology.org).
.INDENT 0.0
.TP
.B repology
Name of the \fBproject\fP to check.
.TP
.B repo
Check the version in this repo. This field is required.
.TP
.B subrepo
Check the version in this subrepo. This field is optional.
When omitted all subrepos are queried.
.UNINDENT
.sp
This source supports \fI\%List Options\fP\&.
.SS Check Anitya
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
source = "anitya"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This enables you to track updates from \fI\%Anitya\fP (release\-monitoring.org).
.INDENT 0.0
.TP
.B anitya
\fBdistro/package\fP, where \fBdistro\fP can be a lot of things like "fedora", "arch linux", "gentoo", etc. \fBpackage\fP is the package name of the chosen distribution.
.UNINDENT
.SS Check Android SDK
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
source = "android_sdk"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This enables you to track updates of Android SDK packages listed in \fBsdkmanager \-\-list\fP\&.
.INDENT 0.0
.TP
.B android_sdk
The package path prefix. This value is matched against the \fBpath\fP attribute in all <remotePackage> nodes in an SDK manifest XML. The first match is used for version comparisons.
.TP
.B repo
Should be one of \fBaddon\fP or \fBpackage\fP\&. Packages in \fBaddon2\-1.xml\fP use \fBaddon\fP and packages in \fBrepository2\-1.xml\fP use \fBpackage\fP\&.
.TP
.B channel
Choose the target channel from one of \fBstable\fP, \fBbeta\fP, \fBdev\fP or \fBcanary\fP\&. This option also accepts a comma\-separated list to pick from multiple channels. For example, the latest unstable version is picked with \fBbeta,dev,canary\fP\&. The default is \fBstable\fP\&.
.TP
.B host_os
Choose the target OS for the tracked package from one of \fBlinux\fP, \fBmacosx\fP, \fBwindows\fP\&. The default is \fBlinux\fP\&. For OS\-independent packages (e.g., Java JARs), this field is ignored.
.UNINDENT
.sp
This source supports \fI\%List Options\fP\&.
.SS Check Sparkle framework
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
source = "sparkle"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This enables you to track updates of macOS applications which using \fI\%Sparkle framework\fP\&.
.INDENT 0.0
.TP
.B sparkle
The url of the sparkle appcast.
.UNINDENT
.SS Check Pagure
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
source = "pagure"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This enables you to check updates from \fI\%Pagure\fP\&.
.INDENT 0.0
.TP
.B pagure
The project name, optionally with a namespace.
.TP
.B host
Hostname of alternative instance like src.fedoraproject.org.
.UNINDENT
.sp
This source returns tags and supports \fI\%List Options\fP\&.
.SS Check APT repository
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
source = "apt"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This enables you to track the update of an arbitrary APT repository, without needing of apt and an updated local APT database.
.INDENT 0.0
.TP
.B pkg
Name of the APT binary package.
.TP
.B srcpkg
Name of the APT source package.
.TP
.B mirror
URL of the repository.
.TP
.B suite
Name of the APT repository release (jessie, wheezy, etc)
.TP
.B repo
Name of the APT repository (main, contrib, etc, defaults to main)
.TP
.B arch
Architecture of the repository (i386, amd64, etc, defaults to amd64)
.TP
.B strip_release
Strip the release part.
.UNINDENT
.sp
Note that either pkg or srcpkg needs to be specified (but not both) or the item name will be used as pkg.
.SS Check Git repository
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
source = "git"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This enables you to check tags or branch commits of an arbitrary git repository, also useful for scenarios like a github project having too many tags.
.INDENT 0.0
.TP
.B git
URL of the Git repository.
.TP
.B use_commit
Return a commit hash instead of tags.
.TP
.B branch
When \fBuse_commit\fP is true, return the commit on the specified branch instead of the default one.
.UNINDENT
.sp
When this source returns tags (\fBuse_commit\fP is not true) it supports \fI\%List Options\fP\&.
.SS Check container registry
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
source = "container"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This enables you to check tags of images on a container registry like Docker.
.INDENT 0.0
.TP
.B container
The path for the container image. For official Docker images, use namespace \fBlibrary/\fP (e.g. \fBlibrary/python\fP).
.TP
.B registry
The container registry host. Default: \fBdocker.io\fP
.UNINDENT
.sp
\fBregistry\fP and \fBcontainer\fP are the host and the path used in the pull
command. Note that the \fBdocker\fP command allows omitting some parts of the
container name while this plugin requires the full name. If the host part is
omitted, use \fBdocker.io\fP, and if there is no slash in the path, prepend
\fBlibrary/\fP to the path. Here are some examples:
.TS
center;
|l|l|l|.
_
T{
Pull command
T}	T{
registry
T}	T{
container
T}
_
T{
docker pull quay.io/prometheus/node\-exporter
T}	T{
quay.io
T}	T{
prometheus/node\-exporter
T}
_
T{
docker pull nvidia/cuda
T}	T{
docker.io
T}	T{
nvidia/cuda
T}
_
T{
docker pull python
T}	T{
docker.io
T}	T{
library/python
T}
_
.TE
.sp
This source returns tags and supports \fI\%List Options\fP\&.
.SS Check ALPM database
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
source = "alpm"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Check package updates in a local ALPM database.
.INDENT 0.0
.TP
.B alpm
Name of the package.
.TP
.B repo
Name of the package repository in which the package resides. If not provided, nvchecker will use \fBrepos\fP value, see below.
.TP
.B repos
An array of possible repositories in which the package may reside in, nvchecker will use the first repository which contains the package. If not provided, \fBcore\fP, \fBextra\fP, \fBcommunity\fP and \fBmultilib\fP will be used, in that order.
.TP
.B dbpath
Path to the ALPM database directory. Default: \fB/var/lib/pacman\fP\&. You need to update the database yourself.
.TP
.B strip_release
Strip the release part, only return the part before \fB\-\fP\&.
.TP
.B provided
Instead of the package version, return the version this package provides. Its value is what the package provides, and \fBstrip_release\fP takes effect too. This is best used with libraries.
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
An additional dependency "pyalpm" is required.
.UNINDENT
.UNINDENT
.SS Check ALPM files database
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
source = "alpmfiles"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Search package files in a local ALPM files database. The package does not need to be installed. This can be useful for checking shared library versions if a package does not list them in its \fBprovides\fP\&.
.INDENT 0.0
.TP
.B pkgname
Name of the package.
.TP
.B filename
Regular expression for the file path. If it contains one matching group, that group is returned. Otherwise return the whole file path. Paths do not have an initial slash. For example, \fBusr/lib/libuv\e\e.so\e\e.([^.]+)\fP matches the major shared library version of libuv.
.TP
.B repo
Name of the package repository in which the package resides. If not provided, search all repositories.
.TP
.B strip_dir
Strip directory from the path before matching. Defaults to \fBfalse\fP\&.
.TP
.B dbpath
Path to the ALPM database directory. Default: \fB/var/lib/pacman\fP\&. You need to update the database yourself with \fBpacman \-Fy\fP\&.
.UNINDENT
.SS Check Open Vsx
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
source = "openvsx"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Check \fI\%Open Vsx\fP for updates.
.INDENT 0.0
.TP
.B openvsx
The extension\(aqs Unique Identifier on open\-vsx.org, e.g. \fBritwickdey.LiveServer\fP\&.
.UNINDENT
.SS Check Visual Studio Code Marketplace
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
source = "vsmarketplace"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Check \fI\%Visual Studio Code Marketplace\fP for updates.
.INDENT 0.0
.TP
.B vsmarketplace
The extension\(aqs Unique Identifier on marketplace.visualstudio.com/vscode, e.g. \fBritwickdey.LiveServer\fP\&.
.UNINDENT
.SS Combine others\(aq results
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
source = "combiner"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This source can combine results from other entries.
.INDENT 0.0
.TP
.B from
A list of entry names to wait results for.
.TP
.B format
A format string to combine the results into the final string.
.UNINDENT
.sp
Example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[entry\-1]
source = "cmd"
cmd = "echo 1"

[entry\-2]
source = "cmd"
cmd = "echo 2"

[entry\-3]
source = "combiner"
from = ["entry\-1", "entry\-2"]
format = "$1\-$2"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Manually updating
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
source = "manual"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This enables you to manually specify the version (maybe because you want to approve each release before it gets to the script).
.INDENT 0.0
.TP
.B manual
The version string.
.UNINDENT
.SS Extending
.sp
It\(aqs possible to extend the supported sources by writing
plugins. See \fI\%plugin\fP for documentation.
.\" Generated by docutils manpage writer.
.
