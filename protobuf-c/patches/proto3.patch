From fec20e99d51661ff6a7570795c81052a84cca2ad Mon Sep 17 00:00:00 2001
From: Paolo Borelli <pborelli@gnome.org>
Date: Sun, 24 Jul 2016 17:21:20 +0200
Subject: [PATCH] proto3 support

This is an experimental first cut at adding proto3 support and I have not
tested it further than porting to proto3 the testcase. Before pushing
this further I would like to have some feedback on whether I am on
the right track.

As far as I understand protobuf-c already has pretty much everything
needed once it is built using a new version of protobuf itself.
The only missing thing is that in proto3 all fields are optional and
having to manually set has_foo is inconvenient.

This patch special cases the proto3 syntax files so that structs for the
bytes, enum and primitive fields do not emit the has_ field.

It also adds PROTOBUF_C_LABEL_NONE to the label enum that is used for
proto3 fields. When a fields has this label, the quantifier is not
consulted and instead the field is packed/unpacked depending on
whether it has a value different from NULL/0.

The patch changes the generated-code test to proto3 as a quick test,
clearly this should not be part of the final patch.

The patch also slightly refactors packing/unpacking optional fields
so that the internal functions take a boolean istead of a pointer to
a boolean: casting in the caller seems cleaner to me... this part
can be dropped or split out in its own preliminary patch.
---
 protobuf-c/protobuf-c.c       | 156 ++++++++++++++++++++++++++++++++++--------
 protobuf-c/protobuf-c.h       |   6 ++
 protoc-c/c_bytes_field.cc     |   7 +-
 protoc-c/c_enum_field.cc      |   7 +-
 protoc-c/c_field.cc           |   9 ++-
 protoc-c/c_primitive_field.cc |   7 +-
 t/test.proto                  |  20 +++---
 7 files changed, 166 insertions(+), 46 deletions(-)

diff --git a/protobuf-c/protobuf-c.c b/protobuf-c/protobuf-c.c
index 2b74b48..c29502b 100644
--- a/protobuf-c/protobuf-c.c
+++ b/protobuf-c/protobuf-c.c
@@ -507,7 +507,7 @@ oneof_field_get_packed_size(const ProtobufCFieldDescriptor *field,
  */
 static size_t
 optional_field_get_packed_size(const ProtobufCFieldDescriptor *field,
-			       const protobuf_c_boolean *has,
+			       const protobuf_c_boolean has,
 			       const void *member)
 {
 	if (field->type == PROTOBUF_C_TYPE_MESSAGE ||
@@ -517,13 +517,37 @@ optional_field_get_packed_size(const ProtobufCFieldDescriptor *field,
 		if (ptr == NULL || ptr == field->default_value)
 			return 0;
 	} else {
-		if (!*has)
+		if (!has)
 			return 0;
 	}
 	return required_field_get_packed_size(field, member);
 }
 
 /**
+ * Calculate the serialized size of a single unlabeled message field, including
+ * the space needed by the preceding tag. Returns 0 if the field isn't set or
+ * if it is set to a "zeroish" value (null pointer or 0 for numerical values).
+ * Unlabeled fields are supported only in proto3.
+ *
+ * \param field
+ *      Field descriptor for member.
+ * \param member
+ *      Field to encode.
+ * \return
+ *      Number of bytes required.
+ */
+static size_t
+unlabeled_field_get_packed_size(const ProtobufCFieldDescriptor *field,
+				const void *member)
+{
+	const void *ptr = *(const void * const *) member;
+	if (ptr == NULL) {
+		return 0;
+	}
+	return required_field_get_packed_size(field, member);
+}
+
+/**
  * Calculate the serialized size of repeated message fields, which may consist
  * of any number of values (including 0). Includes the space needed by the
  * preceding tags (as needed).
@@ -651,11 +675,21 @@ size_t protobuf_c_message_get_packed_size(const ProtobufCMessage *message)
 
 		if (field->label == PROTOBUF_C_LABEL_REQUIRED) {
 			rv += required_field_get_packed_size(field, member);
+		} else if ((field->label == PROTOBUF_C_LABEL_OPTIONAL ||
+			    field->label == PROTOBUF_C_LABEL_NONE) &&
+			   (0 != (field->flags & PROTOBUF_C_FIELD_FLAG_ONEOF))) {
+			rv += oneof_field_get_packed_size(field, qmember, member);
 		} else if (field->label == PROTOBUF_C_LABEL_OPTIONAL) {
-			if (0 != (field->flags & PROTOBUF_C_FIELD_FLAG_ONEOF))
-				rv += oneof_field_get_packed_size(field, qmember, member);
-			else
-				rv += optional_field_get_packed_size(field, qmember, member);
+			rv += optional_field_get_packed_size(
+				field,
+				*(protobuf_c_boolean *) qmember,
+				member
+			);
+		} else if (field->label == PROTOBUF_C_LABEL_NONE) {
+			rv += unlabeled_field_get_packed_size(
+				field,
+				member
+			);
 		} else {
 			rv += repeated_field_get_packed_size(
 				field,
@@ -1102,7 +1136,7 @@ oneof_field_pack(const ProtobufCFieldDescriptor *field,
  */
 static size_t
 optional_field_pack(const ProtobufCFieldDescriptor *field,
-		    const protobuf_c_boolean *has,
+		    const protobuf_c_boolean has,
 		    const void *member, uint8_t *out)
 {
 	if (field->type == PROTOBUF_C_TYPE_MESSAGE ||
@@ -1112,13 +1146,36 @@ optional_field_pack(const ProtobufCFieldDescriptor *field,
 		if (ptr == NULL || ptr == field->default_value)
 			return 0;
 	} else {
-		if (!*has)
+		if (!has)
 			return 0;
 	}
 	return required_field_pack(field, member, out);
 }
 
 /**
+ * Pack an unlabeled field and return the number of bytes written.
+ *
+ * \param field
+ *      Field descriptor.
+ * \param member
+ *      The field member.
+ * \param[out] out
+ *      Packed value.
+ * \return
+ *      Number of bytes written to `out`.
+ */
+static size_t
+unlabeled_field_pack(const ProtobufCFieldDescriptor *field,
+		     const void *member, uint8_t *out)
+{
+	const void *ptr = *(const void * const *) member;
+	if (ptr == NULL) {
+		return 0;
+	}
+	return required_field_pack(field, member, out);
+}
+
+/**
  * Given a field type, return the in-memory size.
  *
  * \todo Implement as a table lookup.
@@ -1389,11 +1446,19 @@ protobuf_c_message_pack(const ProtobufCMessage *message, uint8_t *out)
 
 		if (field->label == PROTOBUF_C_LABEL_REQUIRED) {
 			rv += required_field_pack(field, member, out + rv);
+		} else if ((field->label == PROTOBUF_C_LABEL_OPTIONAL ||
+			    field->label == PROTOBUF_C_LABEL_NONE) &&
+			   (0 != (field->flags & PROTOBUF_C_FIELD_FLAG_ONEOF))) {
+			rv += oneof_field_pack (field, qmember, member, out + rv);
 		} else if (field->label == PROTOBUF_C_LABEL_OPTIONAL) {
-			if (0 != (field->flags & PROTOBUF_C_FIELD_FLAG_ONEOF))
-				rv += oneof_field_pack (field, qmember, member, out + rv);
-			else
-				rv += optional_field_pack(field, qmember, member, out + rv);
+			rv += optional_field_pack(
+				field,
+				*(const protobuf_c_boolean *) qmember,
+				member,
+				out + rv
+			);
+		} else if (field->label == PROTOBUF_C_LABEL_NONE) {
+			rv += unlabeled_field_pack(field, member, out + rv);
 		} else {
 			rv += repeated_field_pack(field, *(const size_t *) qmember,
 				member, out + rv);
@@ -1576,7 +1641,7 @@ oneof_field_pack_to_buffer(const ProtobufCFieldDescriptor *field,
  */
 static size_t
 optional_field_pack_to_buffer(const ProtobufCFieldDescriptor *field,
-			      const protobuf_c_boolean *has,
+			      const protobuf_c_boolean has,
 			      const void *member, ProtobufCBuffer *buffer)
 {
 	if (field->type == PROTOBUF_C_TYPE_MESSAGE ||
@@ -1586,13 +1651,36 @@ optional_field_pack_to_buffer(const ProtobufCFieldDescriptor *field,
 		if (ptr == NULL || ptr == field->default_value)
 			return 0;
 	} else {
-		if (!*has)
+		if (!has)
 			return 0;
 	}
 	return required_field_pack_to_buffer(field, member, buffer);
 }
 
 /**
+ * Pack an unlabeled field to a buffer.
+ *
+ * \param field
+ *      Field descriptor.
+ * \param member
+ *      The element to be packed.
+ * \param[out] buffer
+ *      Virtual buffer to append data to.
+ * \return
+ *      Number of bytes serialised to `buffer`.
+ */
+static size_t
+unlabeled_field_pack_to_buffer(const ProtobufCFieldDescriptor *field,
+			       const void *member, ProtobufCBuffer *buffer)
+{
+	const void *ptr = *(const void *const *) member;
+	if (ptr == NULL) {
+		return 0;
+	}
+	return required_field_pack_to_buffer(field, member, buffer);
+}
+
+/**
  * Get the packed size of an array of same field type.
  *
  * \param field
@@ -1837,22 +1925,28 @@ protobuf_c_message_pack_to_buffer(const ProtobufCMessage *message,
 
 		if (field->label == PROTOBUF_C_LABEL_REQUIRED) {
 			rv += required_field_pack_to_buffer(field, member, buffer);
+		} else if ((field->label == PROTOBUF_C_LABEL_OPTIONAL ||
+			    field->label == PROTOBUF_C_LABEL_NONE) &&
+			   (0 != (field->flags & PROTOBUF_C_FIELD_FLAG_ONEOF))) {
+			rv += oneof_field_pack_to_buffer(
+				field,
+				qmember,
+				member,
+				buffer
+			);
 		} else if (field->label == PROTOBUF_C_LABEL_OPTIONAL) {
-			if (0 != (field->flags & PROTOBUF_C_FIELD_FLAG_ONEOF)) {
-				rv += oneof_field_pack_to_buffer(
-					field,
-					qmember,
-					member,
-					buffer
-					);
-			} else {
-				rv += optional_field_pack_to_buffer(
-					field,
-					qmember,
-					member,
-					buffer
-					);
-			}
+			rv += optional_field_pack_to_buffer(
+				field,
+				*(const protobuf_c_boolean *) qmember,
+				member,
+				buffer
+			);
+		} else if (field->label == PROTOBUF_C_LABEL_NONE) {
+			rv += unlabeled_field_pack_to_buffer(
+				field,
+				member,
+				buffer
+			);
 		} else {
 			rv += repeated_field_pack_to_buffer(
 				field,
@@ -2070,7 +2164,8 @@ merge_messages(ProtobufCMessage *earlier_msg,
 				*n_earlier = 0;
 				*p_earlier = 0;
 			}
-		} else if (fields[i].label == PROTOBUF_C_LABEL_OPTIONAL) {
+		} else if (fields[i].label == PROTOBUF_C_LABEL_OPTIONAL ||
+			   fields[i].label == PROTOBUF_C_LABEL_NONE) { // FIXME to check
 			const ProtobufCFieldDescriptor *field;
 			uint32_t *earlier_case_p = STRUCT_MEMBER_PTR(uint32_t,
 								     earlier_msg,
@@ -2744,6 +2839,7 @@ parse_member(ScannedMember *scanned_member,
 		return parse_required_member(scanned_member, member,
 					     allocator, TRUE);
 	case PROTOBUF_C_LABEL_OPTIONAL:
+	case PROTOBUF_C_LABEL_NONE:
 		if (0 != (field->flags & PROTOBUF_C_FIELD_FLAG_ONEOF)) {
 			return parse_oneof_member(scanned_member, member,
 						  message, allocator);
diff --git a/protobuf-c/protobuf-c.h b/protobuf-c/protobuf-c.h
index 55cce8d..b25db8d 100644
--- a/protobuf-c/protobuf-c.h
+++ b/protobuf-c/protobuf-c.h
@@ -284,6 +284,12 @@ typedef enum {
 	 * preserved.
 	 */
 	PROTOBUF_C_LABEL_REPEATED,
+
+	/**
+	 * This field has no label. This is valid  only in proto3 and is
+	 * equivalent to OPTIONAL but no "has" quantifier will be consulted.
+	 */
+	PROTOBUF_C_LABEL_NONE,
 } ProtobufCLabel;
 
 /**
diff --git a/protoc-c/c_bytes_field.cc b/protoc-c/c_bytes_field.cc
index dc3a3eb..7962c14 100644
--- a/protoc-c/c_bytes_field.cc
+++ b/protoc-c/c_bytes_field.cc
@@ -101,7 +101,8 @@ void BytesFieldGenerator::GenerateStructMembers(io::Printer* printer) const
       printer->Print(variables_, "ProtobufCBinaryData $name$$deprecated$;\n");
       break;
     case FieldDescriptor::LABEL_OPTIONAL:
-      if (descriptor_->containing_oneof() == NULL)
+      if (descriptor_->containing_oneof() == NULL &&
+          descriptor_->file()->syntax() != FileDescriptor::SYNTAX_PROTO3)
         printer->Print(variables_, "protobuf_c_boolean has_$name$$deprecated$;\n");
       printer->Print(variables_, "ProtobufCBinaryData $name$$deprecated$;\n");
       break;
@@ -142,7 +143,9 @@ void BytesFieldGenerator::GenerateStaticInit(io::Printer* printer) const
       printer->Print(variables_, "$default_value$");
       break;
     case FieldDescriptor::LABEL_OPTIONAL:
-      printer->Print(variables_, "0,$default_value$");
+      if (descriptor_->file()->syntax() != FileDescriptor::SYNTAX_PROTO3)
+        printer->Print(variables_, "0, ");
+      printer->Print(variables_, "$default_value$");
       break;
     case FieldDescriptor::LABEL_REPEATED:
       // no support for default?
diff --git a/protoc-c/c_enum_field.cc b/protoc-c/c_enum_field.cc
index f151ce7..5c3be9e 100644
--- a/protoc-c/c_enum_field.cc
+++ b/protoc-c/c_enum_field.cc
@@ -103,7 +103,8 @@ void EnumFieldGenerator::GenerateStructMembers(io::Printer* printer) const
       printer->Print(variables_, "$type$ $name$$deprecated$;\n");
       break;
     case FieldDescriptor::LABEL_OPTIONAL:
-      if (descriptor_->containing_oneof() == NULL)
+      if (descriptor_->containing_oneof() == NULL &&
+          descriptor_->file()->syntax() != FileDescriptor::SYNTAX_PROTO3)
         printer->Print(variables_, "protobuf_c_boolean has_$name$$deprecated$;\n");
       printer->Print(variables_, "$type$ $name$$deprecated$;\n");
       break;
@@ -125,7 +126,9 @@ void EnumFieldGenerator::GenerateStaticInit(io::Printer* printer) const
       printer->Print(variables_, "$default$");
       break;
     case FieldDescriptor::LABEL_OPTIONAL:
-      printer->Print(variables_, "0,$default$");
+      if (descriptor_->file()->syntax() != FileDescriptor::SYNTAX_PROTO3)
+        printer->Print(variables_, "0, ");
+      printer->Print(variables_, "$default$");
       break;
     case FieldDescriptor::LABEL_REPEATED:
       // no support for default?
diff --git a/protoc-c/c_field.cc b/protoc-c/c_field.cc
index cee26d9..2415c07 100644
--- a/protoc-c/c_field.cc
+++ b/protoc-c/c_field.cc
@@ -107,7 +107,6 @@ void FieldGenerator::GenerateDescriptorInitializerGeneric(io::Printer* printer,
 							  const string &descriptor_addr) const
 {
   map<string, string> variables;
-  variables["LABEL"] = CamelToUpper(GetLabelName(descriptor_->label()));
   variables["TYPE"] = type_macro;
   variables["classname"] = FullNameToC(FieldScope(descriptor_)->full_name());
   variables["name"] = FieldName(descriptor_);
@@ -118,6 +117,14 @@ void FieldGenerator::GenerateDescriptorInitializerGeneric(io::Printer* printer,
   if (oneof != NULL)
     variables["oneofname"] = FullNameToLower(oneof->name());
 
+  if (descriptor_->file()->syntax() == FileDescriptor::SYNTAX_PROTO3 &&
+    descriptor_->label() == FieldDescriptor::LABEL_OPTIONAL) {
+    variables["LABEL"] = "NONE";
+    optional_uses_has = false;
+  } else {
+    variables["LABEL"] = CamelToUpper(GetLabelName(descriptor_->label()));
+  }
+
   if (descriptor_->has_default_value()) {
     variables["default_value"] = string("&")
                                + FullNameToLower(descriptor_->full_name())
diff --git a/protoc-c/c_primitive_field.cc b/protoc-c/c_primitive_field.cc
index d834217..fb6dd66 100644
--- a/protoc-c/c_primitive_field.cc
+++ b/protoc-c/c_primitive_field.cc
@@ -113,7 +113,8 @@ void PrimitiveFieldGenerator::GenerateStructMembers(io::Printer* printer) const
       printer->Print(vars, "$c_type$ $name$$deprecated$;\n");
       break;
     case FieldDescriptor::LABEL_OPTIONAL:
-      if (descriptor_->containing_oneof() == NULL)
+      if (descriptor_->containing_oneof() == NULL &&
+          descriptor_->file()->syntax() != FileDescriptor::SYNTAX_PROTO3)
         printer->Print(vars, "protobuf_c_boolean has_$name$$deprecated$;\n");
       printer->Print(vars, "$c_type$ $name$$deprecated$;\n");
       break;
@@ -160,7 +161,9 @@ void PrimitiveFieldGenerator::GenerateStaticInit(io::Printer* printer) const
       printer->Print(vars, "$default_value$");
       break;
     case FieldDescriptor::LABEL_OPTIONAL:
-      printer->Print(vars, "0,$default_value$");
+      if (descriptor_->file()->syntax() != FileDescriptor::SYNTAX_PROTO3)
+        printer->Print(vars, "0, ");
+      printer->Print(vars, "$default_value$");
       break;
     case FieldDescriptor::LABEL_REPEATED:
       printer->Print("0,NULL");
diff --git a/t/test.proto b/t/test.proto
index bc94f13..2fb97c8 100644
--- a/t/test.proto
+++ b/t/test.proto
@@ -1,19 +1,21 @@
+syntax = "proto3";
+
 package foo;
 
 message Person {
-  required string name = 1;
-  required int32 id = 2;
-  optional string email = 3;
+  string name = 1;
+  int32 id = 2;
+  string email = 3;
 
   enum PhoneType {
-    MOBILE = 0;
-    HOME = 1;
+    HOME = 0;
+    MOBILE = 1;
     WORK = 2;
   }
 
   message PhoneNumber {
-    required string number = 1;
-    optional PhoneType type = 2 [default = HOME];
+    string number = 1;
+    PhoneType type = 2;
   }
 
   repeated PhoneNumber phone = 4;
@@ -21,11 +23,11 @@ message Person {
 
 message LookupResult
 {
-  optional Person person = 1;
+  Person person = 1;
 }
 
 message Name {
-  optional string name = 1;
+  string name = 1;
 };
 
 service DirLookup {
