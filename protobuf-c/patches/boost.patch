diff -Naupr a/protoc-c/c_field.cc b/protoc-c/c_field.cc
--- a/protoc-c/c_field.cc	2017-08-05 23:43:57.000000000 +0200
+++ b/protoc-c/c_field.cc	2018-06-10 11:13:13.193018599 +0200
@@ -189,7 +189,7 @@ void FieldGenerator::GenerateDescriptorI
 FieldGeneratorMap::FieldGeneratorMap(const Descriptor* descriptor)
   : descriptor_(descriptor),
     field_generators_(
-      new scoped_ptr<FieldGenerator>[descriptor->field_count()]) {
+      new boost::scoped_ptr<FieldGenerator>[descriptor->field_count()]) {
   // Construct all the FieldGenerators.
   for (int i = 0; i < descriptor->field_count(); i++) {
     field_generators_[i].reset(MakeGenerator(descriptor->field(i)));
diff -Naupr a/protoc-c/c_field.h b/protoc-c/c_field.h
--- a/protoc-c/c_field.h	2016-01-30 01:54:28.000000000 +0100
+++ b/protoc-c/c_field.h	2018-06-10 11:14:24.927121799 +0200
@@ -65,6 +65,9 @@
 
 #include <google/protobuf/stubs/common.h>
 #include <google/protobuf/descriptor.h>
+#include <boost/scoped_ptr.hpp>
+#include <boost/scoped_array.hpp>
+using namespace std;
 
 namespace google {
 namespace protobuf {
@@ -117,7 +120,7 @@ class FieldGeneratorMap {
 
  private:
   const Descriptor* descriptor_;
-  scoped_array<scoped_ptr<FieldGenerator> > field_generators_;
+  boost::scoped_array<boost::scoped_ptr<FieldGenerator> > field_generators_;
 
   static FieldGenerator* MakeGenerator(const FieldDescriptor* field);
 
diff -Naupr a/protoc-c/c_file.cc b/protoc-c/c_file.cc
--- a/protoc-c/c_file.cc	2017-08-05 23:43:57.000000000 +0200
+++ b/protoc-c/c_file.cc	2018-06-10 11:13:13.195018574 +0200
@@ -83,13 +83,13 @@ FileGenerator::FileGenerator(const FileD
                              const string& dllexport_decl)
   : file_(file),
     message_generators_(
-      new scoped_ptr<MessageGenerator>[file->message_type_count()]),
+      new boost::scoped_ptr<MessageGenerator>[file->message_type_count()]),
     enum_generators_(
-      new scoped_ptr<EnumGenerator>[file->enum_type_count()]),
+      new boost::scoped_ptr<EnumGenerator>[file->enum_type_count()]),
     service_generators_(
-      new scoped_ptr<ServiceGenerator>[file->service_count()]),
+      new boost::scoped_ptr<ServiceGenerator>[file->service_count()]),
     extension_generators_(
-      new scoped_ptr<ExtensionGenerator>[file->extension_count()]) {
+      new boost::scoped_ptr<ExtensionGenerator>[file->extension_count()]) {
 
   for (int i = 0; i < file->message_type_count(); i++) {
     message_generators_[i].reset(
diff -Naupr a/protoc-c/c_file.h b/protoc-c/c_file.h
--- a/protoc-c/c_file.h	2016-01-30 01:54:28.000000000 +0100
+++ b/protoc-c/c_file.h	2018-06-10 11:13:13.196018561 +0200
@@ -98,10 +98,10 @@ class FileGenerator {
  private:
   const FileDescriptor* file_;
 
-  scoped_array<scoped_ptr<MessageGenerator> > message_generators_;
-  scoped_array<scoped_ptr<EnumGenerator> > enum_generators_;
-  scoped_array<scoped_ptr<ServiceGenerator> > service_generators_;
-  scoped_array<scoped_ptr<ExtensionGenerator> > extension_generators_;
+  boost::scoped_array<boost::scoped_ptr<MessageGenerator> > message_generators_;
+  boost::scoped_array<boost::scoped_ptr<EnumGenerator> > enum_generators_;
+  boost::scoped_array<boost::scoped_ptr<ServiceGenerator> > service_generators_;
+  boost::scoped_array<boost::scoped_ptr<ExtensionGenerator> > extension_generators_;
 
   // E.g. if the package is foo.bar, package_parts_ is {"foo", "bar"}.
   vector<string> package_parts_;
diff -Naupr a/protoc-c/c_generator.cc b/protoc-c/c_generator.cc
--- a/protoc-c/c_generator.cc	2016-01-30 01:54:28.000000000 +0100
+++ b/protoc-c/c_generator.cc	2018-06-10 11:13:13.197018549 +0200
@@ -149,7 +149,7 @@ bool CGenerator::Generate(const FileDesc
 
   // Generate header.
   {
-    scoped_ptr<io::ZeroCopyOutputStream> output(
+    boost::scoped_ptr<io::ZeroCopyOutputStream> output(
       output_directory->Open(basename + ".h"));
     io::Printer printer(output.get(), '$');
     file_generator.GenerateHeader(&printer);
@@ -157,7 +157,7 @@ bool CGenerator::Generate(const FileDesc
 
   // Generate cc file.
   {
-    scoped_ptr<io::ZeroCopyOutputStream> output(
+    boost::scoped_ptr<io::ZeroCopyOutputStream> output(
       output_directory->Open(basename + ".c"));
     io::Printer printer(output.get(), '$');
     file_generator.GenerateSource(&printer);
diff -Naupr a/protoc-c/c_helpers.cc b/protoc-c/c_helpers.cc
--- a/protoc-c/c_helpers.cc	2017-08-05 23:43:57.000000000 +0200
+++ b/protoc-c/c_helpers.cc	2018-06-10 11:13:13.199018524 +0200
@@ -559,7 +559,7 @@ static int CEscapeInternal(const char* s
 }
 string CEscape(const string& src) {
   const int dest_length = src.size() * 4 + 1; // Maximum possible expansion
-  scoped_array<char> dest(new char[dest_length]);
+  boost::scoped_array<char> dest(new char[dest_length]);
   const int len = CEscapeInternal(src.data(), src.size(),
                                   dest.get(), dest_length, false);
   GOOGLE_DCHECK_GE(len, 0);
diff -Naupr a/protoc-c/c_helpers.h b/protoc-c/c_helpers.h
--- a/protoc-c/c_helpers.h	2017-08-05 23:43:57.000000000 +0200
+++ b/protoc-c/c_helpers.h	2018-06-10 11:14:35.036995408 +0200
@@ -69,6 +69,9 @@
 #include <google/protobuf/descriptor.h>
 #include <google/protobuf/descriptor.pb.h>
 #include <google/protobuf/io/printer.h>
+#include <boost/scoped_ptr.hpp>
+#include <boost/scoped_array.hpp>
+using namespace std;
 
 namespace google {
 namespace protobuf {
diff -Naupr a/protoc-c/c_message.cc b/protoc-c/c_message.cc
--- a/protoc-c/c_message.cc	2017-08-05 23:43:57.000000000 +0200
+++ b/protoc-c/c_message.cc	2018-06-10 11:13:13.203018474 +0200
@@ -83,11 +83,11 @@ MessageGenerator::MessageGenerator(const
   : descriptor_(descriptor),
     dllexport_decl_(dllexport_decl),
     field_generators_(descriptor),
-    nested_generators_(new scoped_ptr<MessageGenerator>[
+    nested_generators_(new boost::scoped_ptr<MessageGenerator>[
       descriptor->nested_type_count()]),
-    enum_generators_(new scoped_ptr<EnumGenerator>[
+    enum_generators_(new boost::scoped_ptr<EnumGenerator>[
       descriptor->enum_type_count()]),
-    extension_generators_(new scoped_ptr<ExtensionGenerator>[
+    extension_generators_(new boost::scoped_ptr<ExtensionGenerator>[
       descriptor->extension_count()]) {
 
   for (int i = 0; i < descriptor->nested_type_count(); i++) {
diff -Naupr a/protoc-c/c_message.h b/protoc-c/c_message.h
--- a/protoc-c/c_message.h	2016-01-30 01:54:28.000000000 +0100
+++ b/protoc-c/c_message.h	2018-06-10 11:13:13.203018474 +0200
@@ -126,9 +126,9 @@ class MessageGenerator {
   const Descriptor* descriptor_;
   string dllexport_decl_;
   FieldGeneratorMap field_generators_;
-  scoped_array<scoped_ptr<MessageGenerator> > nested_generators_;
-  scoped_array<scoped_ptr<EnumGenerator> > enum_generators_;
-  scoped_array<scoped_ptr<ExtensionGenerator> > extension_generators_;
+  boost::scoped_array<boost::scoped_ptr<MessageGenerator> > nested_generators_;
+  boost::scoped_array<boost::scoped_ptr<EnumGenerator> > enum_generators_;
+  boost::scoped_array<boost::scoped_ptr<ExtensionGenerator> > extension_generators_;
 
   GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(MessageGenerator);
 };
