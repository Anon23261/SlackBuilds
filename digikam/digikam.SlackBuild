#!/bin/sh
# Slackware build script for digikam (http://www.digikam.org)
#
# Copyright 2008-2015 Corrado Franco (http://conraid.net)
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#  notice, this list of conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Exit on most errors or unset variables
set -eu

# Set variables:
CWD=$(pwd)

PRGNAM=${PRGNAM:-digikam}
PKGNAM=$(echo ${PRGNAM} | tr A-Z a-z)
VERSION=${VERSION:-4.13.0}
PKGVERSION=$(echo ${VERSION} | tr - _)
BUILD=${BUILD:-1}
TAG=${TAG:-cf}
TMP=${TMP:-/tmp/pkg}
PKG=${TMP}/package-${PKGNAM}
PKGDOCDIR="${PKG}/usr/doc/${PKGNAM}-${PKGVERSION}"

# Insert document files in this variable
DOCFILES="COPYING* core/NEWS README*"

# Automatically determine the architecture we are building on:
if [ -z ${ARCH:=""} ]; then
  case "$( uname -m )" in
    i?86) ARCH=i686 ;;
    arm*) ARCH=arm ;;
    # Unless ${ARCH} is already set, use uname -m for all other archs:
    *) ARCH=$( uname -m ) ;;
  esac
fi

# Set compiling FLAGS
case "${ARCH}" in
  i486)
  SLKCFLAGS="-O2 -march=i486 -mtune=i686"; CHOST="i486"
  SLKLDFLAGS=""; LIBDIRSUFFIX=""
  ;;
  i686)
  SLKCFLAGS="-O2 -march=i686 -fomit-frame-pointer"; CHOST="i486"
  SLKLDFLAGS=""; LIBDIRSUFFIX=""
  ;;
  x86_64)
  SLKCFLAGS="-O2 -fPIC -fomit-frame-pointer"; CHOST="x86_64"
  SLKLDFLAGS="-L/usr/lib64"; LIBDIRSUFFIX="64"
  ;;
  *)
  SLKCFLAGS="-O2"; CHOST=${ARCH}
  SLKLDFLAGS=""; LIBDIRSUFFIX=""
  ;;
esac

# Extract source and prepare:
rm -rf ${PKG}
mkdir -p ${TMP} ${PKG}
cd ${TMP}
rm -rf ${PRGNAM}-${VERSION}
tar xvf ${CWD}/${PRGNAM}-${VERSION}.tar.bz2
cd ${PRGNAM}-${VERSION}

# Make sure ownerships and permissions are sane:
chown -R root:root .
chmod -R u+w,go+r-w,a-s .

# Videoslideshow not compile with imagemagick in current
patch -p1 -i ${CWD}/videoslideshow.patch

# Patch for opencv 3.0.0
# https://bugs.kde.org/show_bug.cgi?id=349601
patch -p1 -i ${CWD}/opencv3.patch

# Configure
mkdir build
cd build
cmake \
  -DCMAKE_C_FLAGS:STRING="${SLKCFLAGS} -DNDEBUG -DQT_NO_DEBUG -Wno-dev" \
  -DCMAKE_CXX_FLAGS:STRING="${SLKCFLAGS} -DNDEBUG -DQT_NO_DEBUG -Wno-dev" \
  -DCMAKE_INSTALL_PREFIX=/usr \
  -DSYSCONF_INSTALL_DIR=/etc/kde \
  -DLIB_SUFFIX="${LIBDIRSUFFIX}" \
  -DCMAKE_BUILD_TYPE=None \
  -DHTML_INSTALL_DIR=/usr/doc/HTML \
  -DENABLE_LCMS2=ON \
  -DENABLE_MYSQLSUPPORT=ON \
  -DDIGIKAMSC_COMPILE_LIBKDCRAW=ON \
  -DDIGIKAMSC_COMPILE_LIBKFACE=ON \
  -DDIGIKAMSC_COMPILE_LIBKGEOMAP=ON \
  -DDIGIKAMSC_COMPILE_LIBKIPI=ON \
  -DDIGIKAMSC_COMPILE_LIBKSANE=ON \
  -DDIGIKAMSC_COMPILE_LIBMEDIAWIKI=ON \
  -DDIGIKAMSC_COMPILE_LIBKEXIV2=ON \
  -DCMAKE_VERBOSE_MAKEFILE:BOOL="TRUE" \
  -DBUILD_tests=OFF \
  -DENABLE_OPENCV3=ON \
  ..

# Build and install:
make
make install DESTDIR=${PKG}
cd -

# Fix conflicts with kde-l10n-*
rm ${PKG}/usr/share/locale/*/LC_MESSAGES/libkipi.mo

# Strip binaries:
find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
find ${PKG} | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs -r strip -g 2> /dev/null || true

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/man ]; then
  find ${PKG}/usr/man -type f -exec chmod 644 {} \; -exec gzip -9 {} \;
  for i in $( find ${PKG}/usr/man -type l ) ; do ln -s $( readlink $i ).gz $i.gz ; rm $i ; done
fi

# Add a documentation directory:
mkdir -p ${PKGDOCDIR}
cp -a ${DOCFILES} ${PKGDOCDIR} || true

# Add a slackbuild script:
install -Dm644 ${CWD}/${PKGNAM}.SlackBuild ${PKGDOCDIR}/${PKGNAM}.SlackBuild

# Add slack-desc
install -Dm644 ${CWD}/slack-desc ${PKG}/install/slack-desc

# Add a doinst.sh
install -Dm644 ${CWD}/doinst.sh ${PKG}/install/doinst.sh

# Create package:
cd ${PKG}
/sbin/makepkg -l y -c n ${CWD}/${PKGNAM}-${PKGVERSION}-${ARCH}-${BUILD}${TAG}.txz

