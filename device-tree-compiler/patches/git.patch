diff -Naupr dtc-1.7.0/Makefile dtc/Makefile
--- dtc-1.7.0/Makefile	2023-02-09 11:01:35.000000000 +0100
+++ dtc/Makefile	2023-05-04 14:37:51.761667966 +0200
@@ -22,7 +22,8 @@ ASSUME_MASK ?= 0
 
 CPPFLAGS = -I libfdt -I . -DFDT_ASSUME_MASK=$(ASSUME_MASK)
 WARNINGS = -Wall -Wpointer-arith -Wcast-qual -Wnested-externs -Wsign-compare \
-	-Wstrict-prototypes -Wmissing-prototypes -Wredundant-decls -Wshadow
+	-Wstrict-prototypes -Wmissing-prototypes -Wredundant-decls -Wshadow \
+	-Wsuggest-attribute=format -Wwrite-strings
 CFLAGS = -g -Os $(SHAREDLIB_CFLAGS) -Werror $(WARNINGS) $(EXTRA_CFLAGS)
 
 BISON = bison
diff -Naupr dtc-1.7.0/checks.c dtc/checks.c
--- dtc-1.7.0/checks.c	2023-02-09 11:01:35.000000000 +0100
+++ dtc/checks.c	2023-05-04 14:37:51.761667966 +0200
@@ -31,7 +31,7 @@ typedef void (*check_fn)(struct check *c
 struct check {
 	const char *name;
 	check_fn fn;
-	void *data;
+	const void *data;
 	bool warn, error;
 	enum checkstatus status;
 	bool inprogress;
@@ -114,6 +114,7 @@ static inline void  PRINTF(5, 6) check_m
 	}
 
 	fputs(str, stderr);
+	free(str);
 }
 
 #define FAIL(c, dti, node, ...)						\
@@ -207,7 +208,7 @@ static void check_is_string(struct check
 			    struct node *node)
 {
 	struct property *prop;
-	char *propname = c->data;
+	const char *propname = c->data;
 
 	prop = get_property(node, propname);
 	if (!prop)
@@ -226,7 +227,7 @@ static void check_is_string_list(struct
 {
 	int rem, l;
 	struct property *prop;
-	char *propname = c->data;
+	const char *propname = c->data;
 	char *str;
 
 	prop = get_property(node, propname);
@@ -254,7 +255,7 @@ static void check_is_cell(struct check *
 			  struct node *node)
 {
 	struct property *prop;
-	char *propname = c->data;
+	const char *propname = c->data;
 
 	prop = get_property(node, propname);
 	if (!prop)
@@ -1078,10 +1079,11 @@ static void check_i2c_bus_reg(struct che
 		/* Ignore I2C_OWN_SLAVE_ADDRESS */
 		reg &= ~I2C_OWN_SLAVE_ADDRESS;
 
-		if ((reg & I2C_TEN_BIT_ADDRESS) && ((reg & ~I2C_TEN_BIT_ADDRESS) > 0x3ff))
-			FAIL_PROP(c, dti, node, prop, "I2C address must be less than 10-bits, got \"0x%x\"",
+		if (reg & I2C_TEN_BIT_ADDRESS) {
+			if ((reg & ~I2C_TEN_BIT_ADDRESS) > 0x3ff)
+				FAIL_PROP(c, dti, node, prop, "I2C address must be less than 10-bits, got \"0x%x\"",
 				  reg);
-		else if (reg > 0x7f)
+		} else if (reg > 0x7f)
 			FAIL_PROP(c, dti, node, prop, "I2C address must be less than 7-bits, got \"0x%x\". Set I2C_TEN_BIT_ADDRESS for 10 bit addresses or fix the property",
 				  reg);
 	}
@@ -1108,7 +1110,7 @@ static void check_spi_bus_bridge(struct
 		for_each_child(node, child) {
 			struct property *prop;
 			for_each_property(child, prop) {
-				if (strprefixeq(prop->name, 4, "spi-")) {
+				if (strstarts(prop->name, "spi-")) {
 					node->bus = &spi_bus;
 					break;
 				}
@@ -1465,7 +1467,7 @@ static void check_provider_cells_propert
 					  struct dt_info *dti,
 				          struct node *node)
 {
-	struct provider *provider = c->data;
+	const struct provider *provider = c->data;
 	struct property *prop;
 
 	prop = get_property(node, provider->prop_name);
diff -Naupr dtc-1.7.0/dtc-parser.y dtc/dtc-parser.y
--- dtc-1.7.0/dtc-parser.y	2023-02-09 11:01:35.000000000 +0100
+++ dtc/dtc-parser.y	2023-05-04 14:37:51.761667966 +0200
@@ -284,14 +284,17 @@ propdef:
 	  DT_PROPNODENAME '=' propdata ';'
 		{
 			$$ = build_property($1, $3, &@$);
+			free($1);
 		}
 	| DT_PROPNODENAME ';'
 		{
 			$$ = build_property($1, empty_data, &@$);
+			free($1);
 		}
 	| DT_DEL_PROP DT_PROPNODENAME ';'
 		{
 			$$ = build_property_delete($2);
+			free($2);
 		}
 	| DT_LABEL propdef
 		{
@@ -570,10 +573,12 @@ subnode:
 	  DT_PROPNODENAME nodedef
 		{
 			$$ = name_node($2, $1);
+			free($1);
 		}
 	| DT_DEL_NODE DT_PROPNODENAME ';'
 		{
 			$$ = name_node(build_node_delete(&@$), $2);
+			free($2);
 		}
 	| DT_OMIT_NO_REF subnode
 		{
diff -Naupr dtc-1.7.0/dtc.h dtc/dtc.h
--- dtc-1.7.0/dtc.h	2023-02-09 11:01:35.000000000 +0100
+++ dtc/dtc.h	2023-05-04 14:37:51.762667959 +0200
@@ -260,16 +260,16 @@ struct node {
 void add_label(struct label **labels, char *label);
 void delete_labels(struct label **labels);
 
-struct property *build_property(char *name, struct data val,
+struct property *build_property(const char *name, struct data val,
 				struct srcpos *srcpos);
-struct property *build_property_delete(char *name);
+struct property *build_property_delete(const char *name);
 struct property *chain_property(struct property *first, struct property *list);
 struct property *reverse_properties(struct property *first);
 
 struct node *build_node(struct property *proplist, struct node *children,
 			struct srcpos *srcpos);
 struct node *build_node_delete(struct srcpos *srcpos);
-struct node *name_node(struct node *node, char *name);
+struct node *name_node(struct node *node, const char *name);
 struct node *omit_node_if_unused(struct node *node);
 struct node *reference_node(struct node *node);
 struct node *chain_node(struct node *first, struct node *list);
@@ -336,9 +336,9 @@ struct dt_info *build_dt_info(unsigned i
 			      struct reserve_info *reservelist,
 			      struct node *tree, uint32_t boot_cpuid_phys);
 void sort_tree(struct dt_info *dti);
-void generate_label_tree(struct dt_info *dti, char *name, bool allocph);
-void generate_fixups_tree(struct dt_info *dti, char *name);
-void generate_local_fixups_tree(struct dt_info *dti, char *name);
+void generate_label_tree(struct dt_info *dti, const char *name, bool allocph);
+void generate_fixups_tree(struct dt_info *dti, const char *name);
+void generate_local_fixups_tree(struct dt_info *dti, const char *name);
 
 /* Checks */
 
diff -Naupr dtc-1.7.0/fdtoverlay.c dtc/fdtoverlay.c
--- dtc-1.7.0/fdtoverlay.c	2023-02-09 11:01:35.000000000 +0100
+++ dtc/fdtoverlay.c	2023-05-04 14:37:51.762667959 +0200
@@ -23,9 +23,7 @@
 /* Usage related data. */
 static const char usage_synopsis[] =
 	"apply a number of overlays to a base blob\n"
-	"	fdtoverlay <options> [<overlay.dtbo> [<overlay.dtbo>]]\n"
-	"\n"
-	USAGE_TYPE_MSG;
+	"	fdtoverlay <options> [<overlay.dtbo> [<overlay.dtbo>]]";
 static const char usage_short_opts[] = "i:o:v" USAGE_COMMON_SHORT_OPTS;
 static struct option const usage_long_opts[] = {
 	{"input",            required_argument, NULL, 'i'},
@@ -50,7 +48,7 @@ static void *apply_one(char *base, const
 	int ret;
 
 	/*
-	 * We take a copies first, because a a failed apply can trash
+	 * We take a copies first, because a failed apply can trash
 	 * both the base blob and the overlay
 	 */
 	tmpo = xmalloc(fdt_totalsize(overlay));
diff -Naupr dtc-1.7.0/flattree.c dtc/flattree.c
--- dtc-1.7.0/flattree.c	2023-02-09 11:01:35.000000000 +0100
+++ dtc/flattree.c	2023-05-04 14:37:51.762667959 +0200
@@ -604,11 +604,11 @@ static void flat_realign(struct inbuf *i
 		die("Premature end of data parsing flat device tree\n");
 }
 
-static char *flat_read_string(struct inbuf *inb)
+static const char *flat_read_string(struct inbuf *inb)
 {
 	int len = 0;
 	const char *p = inb->ptr;
-	char *str;
+	const char *str;
 
 	do {
 		if (p >= inb->limit)
@@ -616,7 +616,7 @@ static char *flat_read_string(struct inb
 		len++;
 	} while ((*p++) != '\0');
 
-	str = xstrdup(inb->ptr);
+	str = inb->ptr;
 
 	inb->ptr += len;
 
@@ -711,7 +711,7 @@ static struct reserve_info *flat_read_me
 }
 
 
-static char *nodename_from_path(const char *ppath, const char *cpath)
+static const char *nodename_from_path(const char *ppath, const char *cpath)
 {
 	int plen;
 
@@ -725,7 +725,7 @@ static char *nodename_from_path(const ch
 	if (!streq(ppath, "/"))
 		plen++;
 
-	return xstrdup(cpath + plen);
+	return cpath + plen;
 }
 
 static struct node *unflatten_tree(struct inbuf *dtbuf,
@@ -733,7 +733,7 @@ static struct node *unflatten_tree(struc
 				   const char *parent_flatname, int flags)
 {
 	struct node *node;
-	char *flatname;
+	const char *flatname;
 	uint32_t val;
 
 	node = build_node(NULL, NULL, NULL);
@@ -741,9 +741,10 @@ static struct node *unflatten_tree(struc
 	flatname = flat_read_string(dtbuf);
 
 	if (flags & FTF_FULLPATH)
-		node->name = nodename_from_path(parent_flatname, flatname);
+		node->name = xstrdup(nodename_from_path(parent_flatname,
+							flatname));
 	else
-		node->name = flatname;
+		node->name = xstrdup(flatname);
 
 	do {
 		struct property *prop;
@@ -785,10 +786,6 @@ static struct node *unflatten_tree(struc
 		}
 	} while (val != FDT_END_NODE);
 
-	if (node->name != flatname) {
-		free(flatname);
-	}
-
 	return node;
 }
 
diff -Naupr dtc-1.7.0/fstree.c dtc/fstree.c
--- dtc-1.7.0/fstree.c	2023-02-09 11:01:35.000000000 +0100
+++ dtc/fstree.c	2023-05-04 14:37:51.762667959 +0200
@@ -43,7 +43,7 @@ static struct node *read_fstree(const ch
 					"WARNING: Cannot open %s: %s\n",
 					tmpname, strerror(errno));
 			} else {
-				prop = build_property(xstrdup(de->d_name),
+				prop = build_property(de->d_name,
 						      data_copy_file(pfile,
 								     st.st_size),
 						      NULL);
diff -Naupr dtc-1.7.0/libfdt/fdt_ro.c dtc/libfdt/fdt_ro.c
--- dtc-1.7.0/libfdt/fdt_ro.c	2023-02-09 11:01:35.000000000 +0100
+++ dtc/libfdt/fdt_ro.c	2023-05-04 14:37:51.763667952 +0200
@@ -522,16 +522,22 @@ uint32_t fdt_get_phandle(const void *fdt
 	return fdt32_ld_(php);
 }
 
-const char *fdt_get_alias_namelen(const void *fdt,
-				  const char *name, int namelen)
+static const void *fdt_path_getprop_namelen(const void *fdt, const char *path,
+					    const char *propname, int propnamelen,
+					    int *lenp)
 {
-	int aliasoffset;
+	int offset = fdt_path_offset(fdt, path);
 
-	aliasoffset = fdt_path_offset(fdt, "/aliases");
-	if (aliasoffset < 0)
+	if (offset < 0)
 		return NULL;
 
-	return fdt_getprop_namelen(fdt, aliasoffset, name, namelen, NULL);
+	return fdt_getprop_namelen(fdt, offset, propname, propnamelen, lenp);
+}
+
+const char *fdt_get_alias_namelen(const void *fdt,
+				  const char *name, int namelen)
+{
+	return fdt_path_getprop_namelen(fdt, "/aliases", name, namelen, NULL);
 }
 
 const char *fdt_get_alias(const void *fdt, const char *name)
@@ -539,6 +545,17 @@ const char *fdt_get_alias(const void *fd
 	return fdt_get_alias_namelen(fdt, name, strlen(name));
 }
 
+const char *fdt_get_symbol_namelen(const void *fdt,
+				   const char *name, int namelen)
+{
+	return fdt_path_getprop_namelen(fdt, "/__symbols__", name, namelen, NULL);
+}
+
+const char *fdt_get_symbol(const void *fdt, const char *name)
+{
+	return fdt_get_symbol_namelen(fdt, name, strlen(name));
+}
+
 int fdt_get_path(const void *fdt, int nodeoffset, char *buf, int buflen)
 {
 	int pdepth = 0, p = 0;
diff -Naupr dtc-1.7.0/libfdt/libfdt.h dtc/libfdt/libfdt.h
--- dtc-1.7.0/libfdt/libfdt.h	2023-02-09 11:01:35.000000000 +0100
+++ dtc/libfdt/libfdt.h	2023-05-04 14:37:51.763667952 +0200
@@ -524,10 +524,35 @@ int fdt_path_offset_namelen(const void *
  * level matching the given component, differentiated only by unit
  * address).
  *
+ * If the path is not absolute (i.e. does not begin with '/'), the
+ * first component is treated as an alias.  That is, the property by
+ * that name is looked up in the /aliases node, and the value of that
+ * property used in place of that first component.
+ *
+ * For example, for this small fragment
+ *
+ * / {
+ *     aliases {
+ *         i2c2 = &foo; // RHS compiles to "/soc@0/i2c@30a40000/eeprom@52"
+ *     };
+ *     soc@0 {
+ *         foo: i2c@30a40000 {
+ *             bar: eeprom@52 {
+ *             };
+ *         };
+ *     };
+ * };
+ *
+ * these would be equivalent:
+ *
+ *   /soc@0/i2c@30a40000/eeprom@52
+ *   i2c2/eeprom@52
+ *
  * returns:
  *	structure block offset of the node with the requested path (>=0), on
  *		success
- *	-FDT_ERR_BADPATH, given path does not begin with '/' or is invalid
+ *	-FDT_ERR_BADPATH, given path does not begin with '/' and the first
+ *		component is not a valid alias
  *	-FDT_ERR_NOTFOUND, if the requested node does not exist
  *      -FDT_ERR_BADMAGIC,
  *	-FDT_ERR_BADVERSION,
@@ -870,6 +895,42 @@ const char *fdt_get_alias_namelen(const
 const char *fdt_get_alias(const void *fdt, const char *name);
 
 /**
+ * fdt_get_symbol_namelen - get symbol based on substring
+ * @fdt: pointer to the device tree blob
+ * @name: name of the symbol to look up
+ * @namelen: number of characters of name to consider
+ *
+ * Identical to fdt_get_symbol(), but only examine the first @namelen
+ * characters of @name for matching the symbol name.
+ *
+ * Return: a pointer to the expansion of the symbol named @name, if it exists,
+ *	   NULL otherwise
+ */
+#ifndef SWIG /* Not available in Python */
+const char *fdt_get_symbol_namelen(const void *fdt,
+				   const char *name, int namelen);
+#endif
+
+/**
+ * fdt_get_symbol - retrieve the path referenced by a given symbol
+ * @fdt: pointer to the device tree blob
+ * @name: name of the symbol to look up
+ *
+ * fdt_get_symbol() retrieves the value of a given symbol.  That is,
+ * the value of the property named @name in the node
+ * /__symbols__. Such a node exists only for a device tree blob that
+ * has been compiled with the -@ dtc option. Each property corresponds
+ * to a label appearing in the device tree source, with the name of
+ * the property being the label and the value being the full path of
+ * the node it is attached to.
+ *
+ * returns:
+ *	a pointer to the expansion of the symbol named 'name', if it exists
+ *	NULL, if the given symbol or the /__symbols__ node does not exist
+ */
+const char *fdt_get_symbol(const void *fdt, const char *name);
+
+/**
  * fdt_get_path - determine the full path of a node
  * @fdt: pointer to the device tree blob
  * @nodeoffset: offset of the node whose path to find
diff -Naupr dtc-1.7.0/livetree.c dtc/livetree.c
--- dtc-1.7.0/livetree.c	2023-02-09 11:01:35.000000000 +0100
+++ dtc/livetree.c	2023-05-04 14:37:51.764667946 +0200
@@ -36,27 +36,27 @@ void delete_labels(struct label **labels
 		label->deleted = 1;
 }
 
-struct property *build_property(char *name, struct data val,
+struct property *build_property(const char *name, struct data val,
 				struct srcpos *srcpos)
 {
 	struct property *new = xmalloc(sizeof(*new));
 
 	memset(new, 0, sizeof(*new));
 
-	new->name = name;
+	new->name = xstrdup(name);
 	new->val = val;
 	new->srcpos = srcpos_copy(srcpos);
 
 	return new;
 }
 
-struct property *build_property_delete(char *name)
+struct property *build_property_delete(const char *name)
 {
 	struct property *new = xmalloc(sizeof(*new));
 
 	memset(new, 0, sizeof(*new));
 
-	new->name = name;
+	new->name = xstrdup(name);
 	new->deleted = 1;
 
 	return new;
@@ -116,11 +116,11 @@ struct node *build_node_delete(struct sr
 	return new;
 }
 
-struct node *name_node(struct node *node, char *name)
+struct node *name_node(struct node *node, const char *name)
 {
 	assert(node->name == NULL);
 
-	node->name = name;
+	node->name = xstrdup(name);
 
 	return node;
 }
@@ -250,6 +250,7 @@ struct node * add_orphan_node(struct nod
 	name_node(new_node, "__overlay__");
 	node = build_node(p, new_node, NULL);
 	name_node(node, name);
+	free(name);
 
 	add_child(dt, node);
 	return dt;
@@ -616,10 +617,25 @@ struct node *get_node_by_ref(struct node
 	return target;
 }
 
+static void add_phandle_property(struct node *node,
+				 const char *name, int format)
+{
+	struct data d;
+
+	if (!(phandle_format & format))
+		return;
+	if (get_property(node, name))
+		return;
+
+	d = data_add_marker(empty_data, TYPE_UINT32, NULL);
+	d = data_append_cell(d, node->phandle);
+
+	add_property(node, build_property(name, d, NULL));
+}
+
 cell_t get_node_phandle(struct node *root, struct node *node)
 {
 	static cell_t phandle = 1; /* FIXME: ick, static local */
-	struct data d = empty_data;
 
 	if (phandle_is_valid(node->phandle))
 		return node->phandle;
@@ -629,16 +645,8 @@ cell_t get_node_phandle(struct node *roo
 
 	node->phandle = phandle;
 
-	d = data_add_marker(d, TYPE_UINT32, NULL);
-	d = data_append_cell(d, phandle);
-
-	if (!get_property(node, "linux,phandle")
-	    && (phandle_format & PHANDLE_LEGACY))
-		add_property(node, build_property("linux,phandle", d, NULL));
-
-	if (!get_property(node, "phandle")
-	    && (phandle_format & PHANDLE_EPAPR))
-		add_property(node, build_property("phandle", d, NULL));
+	add_phandle_property(node, "linux,phandle", PHANDLE_LEGACY);
+	add_phandle_property(node, "phandle", PHANDLE_EPAPR);
 
 	/* If the node *does* have a phandle property, we must
 	 * be dealing with a self-referencing phandle, which will be
@@ -808,18 +816,18 @@ void sort_tree(struct dt_info *dti)
 }
 
 /* utility helper to avoid code duplication */
-static struct node *build_and_name_child_node(struct node *parent, char *name)
+static struct node *build_and_name_child_node(struct node *parent, const char *name)
 {
 	struct node *node;
 
 	node = build_node(NULL, NULL, NULL);
-	name_node(node, xstrdup(name));
+	name_node(node, name);
 	add_child(parent, node);
 
 	return node;
 }
 
-static struct node *build_root_node(struct node *dt, char *name)
+static struct node *build_root_node(struct node *dt, const char *name)
 {
 	struct node *an;
 
@@ -1040,7 +1048,7 @@ static void generate_local_fixups_tree_i
 		generate_local_fixups_tree_internal(dti, lfn, c);
 }
 
-void generate_label_tree(struct dt_info *dti, char *name, bool allocph)
+void generate_label_tree(struct dt_info *dti, const char *name, bool allocph)
 {
 	if (!any_label_tree(dti, dti->dt))
 		return;
@@ -1048,7 +1056,7 @@ void generate_label_tree(struct dt_info
 				     dti->dt, allocph);
 }
 
-void generate_fixups_tree(struct dt_info *dti, char *name)
+void generate_fixups_tree(struct dt_info *dti, const char *name)
 {
 	if (!any_fixup_tree(dti, dti->dt))
 		return;
@@ -1056,7 +1064,7 @@ void generate_fixups_tree(struct dt_info
 				      dti->dt);
 }
 
-void generate_local_fixups_tree(struct dt_info *dti, char *name)
+void generate_local_fixups_tree(struct dt_info *dti, const char *name)
 {
 	if (!any_local_fixup_tree(dti, dti->dt))
 		return;
diff -Naupr dtc-1.7.0/meson.build dtc/meson.build
--- dtc-1.7.0/meson.build	2023-02-09 11:01:35.000000000 +0100
+++ dtc/meson.build	2023-05-04 14:37:51.764667946 +0200
@@ -1,5 +1,5 @@
 project('dtc', 'c',
-  version: '1.6.0',
+  version: '1.7.0',
   license: ['GPL2+', 'BSD-2'],
   default_options: 'werror=true',
 )
@@ -14,7 +14,9 @@ add_project_arguments(
     '-Wstrict-prototypes',
     '-Wmissing-prototypes',
     '-Wredundant-decls',
-    '-Wshadow'
+    '-Wshadow',
+    '-Wsuggest-attribute=format',
+    '-Wwrite-strings',
   ]),
   language: 'c'
 )
diff -Naupr dtc-1.7.0/srcpos.c dtc/srcpos.c
--- dtc-1.7.0/srcpos.c	2023-02-09 11:01:35.000000000 +0100
+++ dtc/srcpos.c	2023-05-04 14:37:51.765667939 +0200
@@ -3,7 +3,9 @@
  * Copyright 2007 Jon Loeliger, Freescale Semiconductor, Inc.
  */
 
+#ifndef _GNU_SOURCE
 #define _GNU_SOURCE
+#endif
 
 #include <stdio.h>
 
@@ -311,8 +313,8 @@ srcpos_string(struct srcpos *pos)
 static char *
 srcpos_string_comment(struct srcpos *pos, bool first_line, int level)
 {
-	char *pos_str, *fname, *first, *rest;
-	bool fresh_fname = false;
+	char *pos_str, *fresh_fname = NULL, *first, *rest;
+	const char *fname;
 
 	if (!pos) {
 		if (level > 1) {
@@ -330,9 +332,9 @@ srcpos_string_comment(struct srcpos *pos
 	else if (level > 1)
 		fname = pos->file->name;
 	else {
-		fname = shorten_to_initial_path(pos->file->name);
-		if (fname)
-			fresh_fname = true;
+		fresh_fname = shorten_to_initial_path(pos->file->name);
+		if (fresh_fname)
+			fname = fresh_fname;
 		else
 			fname = pos->file->name;
 	}
@@ -346,7 +348,7 @@ srcpos_string_comment(struct srcpos *pos
 			  first_line ? pos->first_line : pos->last_line);
 
 	if (fresh_fname)
-		free(fname);
+		free(fresh_fname);
 
 	if (pos->next != NULL) {
 		rest = srcpos_string_comment(pos->next, first_line, level);
diff -Naupr dtc-1.7.0/tests/appendprop2.c dtc/tests/appendprop2.c
--- dtc-1.7.0/tests/appendprop2.c	2023-02-09 11:01:35.000000000 +0100
+++ dtc/tests/appendprop2.c	2023-05-04 14:37:51.765667939 +0200
@@ -36,6 +36,7 @@ int main(int argc, char *argv[])
 
 	buf = xmalloc(SPACE);
 	CHECK(fdt_open_into(fdt, buf, SPACE));
+	free(fdt);
 	fdt = buf;
 
 	CHECK(fdt_appendprop(fdt, 0, "prop-bytes", bytes, sizeof(bytes)));
diff -Naupr dtc-1.7.0/tests/appendprop_addrrange.c dtc/tests/appendprop_addrrange.c
--- dtc-1.7.0/tests/appendprop_addrrange.c	2023-02-09 11:01:35.000000000 +0100
+++ dtc/tests/appendprop_addrrange.c	2023-05-04 14:37:51.765667939 +0200
@@ -36,7 +36,7 @@ int main(int argc, char *argv[])
 	err = fdt_open_into(fdt, buf, 0x1000);
 	if (err)
 		FAIL("fdt_open_into(): %s", fdt_strerror(err));
-
+	free(fdt);
 	fdt = buf;
 
 	/* Set up */
diff -Naupr dtc-1.7.0/tests/check_path.c dtc/tests/check_path.c
--- dtc-1.7.0/tests/check_path.c	2023-02-09 11:01:35.000000000 +0100
+++ dtc/tests/check_path.c	2023-05-04 14:37:51.766667932 +0200
@@ -32,6 +32,7 @@ static void *open_dt(char *path)
 	 * Resize our DTs to 4k so that we have room to operate on
 	 */
 	CHECK(fdt_open_into(dt, copy, FDT_COPY_SIZE));
+	free(dt);
 
 	return copy;
 }
diff -Naupr dtc-1.7.0/tests/del_node.c dtc/tests/del_node.c
--- dtc-1.7.0/tests/del_node.c	2023-02-09 11:01:35.000000000 +0100
+++ dtc/tests/del_node.c	2023-05-04 14:37:51.766667932 +0200
@@ -18,15 +18,16 @@
 
 int main(int argc, char *argv[])
 {
-	void *fdt;
+	void *fdt, *blob;
 	int subnode1_offset, subnode2_offset, subsubnode2_offset;
 	int err;
 	int oldsize, delsize, newsize;
 
 	test_init(argc, argv);
-	fdt = load_blob_arg(argc, argv);
+	blob = load_blob_arg(argc, argv);
 
-	fdt = open_blob_rw(fdt);
+	fdt = open_blob_rw(blob);
+	free(blob);
 
 	oldsize = fdt_totalsize(fdt);
 
diff -Naupr dtc-1.7.0/tests/del_property.c dtc/tests/del_property.c
--- dtc-1.7.0/tests/del_property.c	2023-02-09 11:01:35.000000000 +0100
+++ dtc/tests/del_property.c	2023-05-04 14:37:51.766667932 +0200
@@ -18,16 +18,17 @@
 
 int main(int argc, char *argv[])
 {
-	void *fdt;
+	void *fdt, *blob;
 	const uint32_t *intp;
 	const char *strp;
 	int err, lenerr;
 	int oldsize, delsize, newsize;
 
 	test_init(argc, argv);
-	fdt = load_blob_arg(argc, argv);
+	blob = load_blob_arg(argc, argv);
 
-	fdt = open_blob_rw(fdt);
+	fdt = open_blob_rw(blob);
+	free(blob);
 
 	oldsize = fdt_totalsize(fdt);
 
@@ -73,5 +74,6 @@ int main(int argc, char *argv[])
 	if (newsize >= oldsize)
 		FAIL("Tree failed to shrink after deletions");
 
+	free(fdt);
 	PASS();
 }
diff -Naupr dtc-1.7.0/tests/overlay.c dtc/tests/overlay.c
--- dtc-1.7.0/tests/overlay.c	2023-02-09 11:01:35.000000000 +0100
+++ dtc/tests/overlay.c	2023-05-04 14:37:51.769667911 +0200
@@ -186,6 +186,7 @@ static void *open_dt(char *path)
 	 * Resize our DTs to 4k so that we have room to operate on
 	 */
 	CHECK(fdt_open_into(dt, copy, FDT_COPY_SIZE));
+	free(dt);
 
 	return copy;
 }
diff -Naupr dtc-1.7.0/tests/path_offset.c dtc/tests/path_offset.c
--- dtc-1.7.0/tests/path_offset.c	2023-02-09 11:01:35.000000000 +0100
+++ dtc/tests/path_offset.c	2023-05-04 14:37:51.770667904 +0200
@@ -41,7 +41,7 @@ static int check_subnode(void *fdt, int
 	return offset;
 }
 
-static void check_path_offset(void *fdt, char *path, int offset)
+static void check_path_offset(void *fdt, const char *path, int offset)
 {
 	int rc;
 
@@ -56,7 +56,7 @@ static void check_path_offset(void *fdt,
 		     " %d instead of %d", path, rc, offset);
 }
 
-static void check_path_offset_namelen(void *fdt, char *path, int namelen,
+static void check_path_offset_namelen(void *fdt, const char *path, int namelen,
 				      int offset)
 {
 	int rc;
diff -Naupr dtc-1.7.0/tests/run_tests.sh dtc/tests/run_tests.sh
--- dtc-1.7.0/tests/run_tests.sh	2023-02-09 11:01:35.000000000 +0100
+++ dtc/tests/run_tests.sh	2023-05-04 14:37:51.771667898 +0200
@@ -519,8 +519,8 @@ libfdt_tests () {
     check_tests "$SRCDIR/phandle-args-overflow.dts" clocks_property
 
     ## https://github.com/dgibson/dtc/issues/74
-    run_dtc_test -I dts -O dtb -o cell-overflow-results.test.dtb cell-overflow-results.dts
-    run_dtc_test -I dts -O dtb -o cell-overflow.test.dtb cell-overflow.dts
+    run_dtc_test -I dts -O dtb -o cell-overflow-results.test.dtb "$SRCDIR/cell-overflow-results.dts"
+    run_dtc_test -I dts -O dtb -o cell-overflow.test.dtb "$SRCDIR/cell-overflow.dts"
     run_test dtbs_equal_ordered cell-overflow.test.dtb cell-overflow-results.test.dtb
 
     # check full tests
diff -Naupr dtc-1.7.0/tests/set_name.c dtc/tests/set_name.c
--- dtc-1.7.0/tests/set_name.c	2023-02-09 11:01:35.000000000 +0100
+++ dtc/tests/set_name.c	2023-05-04 14:37:51.772667891 +0200
@@ -69,15 +69,17 @@ static void check_set_name(void *fdt, co
 
 int main(int argc, char *argv[])
 {
-	void *fdt;
+	void *fdt, *blob;
 
 	test_init(argc, argv);
-	fdt = load_blob_arg(argc, argv);
-	fdt = open_blob_rw(fdt);
+	blob = load_blob_arg(argc, argv);
+	fdt = open_blob_rw(blob);
+	free(blob);
 
 	check_set_name(fdt, "/subnode@1", "subnode@17");
 	check_set_name(fdt, "/subnode@2/subsubnode@0", "fred@0");
 	check_set_name(fdt, "/subnode@17/subsubnode", "something@0");
 
+	free(fdt);
 	PASS();
 }
diff -Naupr dtc-1.7.0/tests/setprop.c dtc/tests/setprop.c
--- dtc-1.7.0/tests/setprop.c	2023-02-09 11:01:35.000000000 +0100
+++ dtc/tests/setprop.c	2023-05-04 14:37:51.772667891 +0200
@@ -36,6 +36,7 @@ int main(int argc, char *argv[])
 	if (err)
 		FAIL("fdt_open_into(): %s", fdt_strerror(err));
 
+	free(fdt);
 	fdt = buf;
 
 	intp = check_getprop_cell(fdt, 0, "prop-int", TEST_VALUE_1);
diff -Naupr dtc-1.7.0/tests/tests.h dtc/tests/tests.h
--- dtc-1.7.0/tests/tests.h	2023-02-09 11:01:35.000000000 +0100
+++ dtc/tests/tests.h	2023-05-04 14:37:51.773667884 +0200
@@ -123,7 +123,7 @@ void vg_prepare_blob(void *fdt, size_t b
 void *load_blob(const char *filename);
 void *load_blob_arg(int argc, char *argv[]);
 void save_blob(const char *filename, void *blob);
-void *open_blob_rw(void *blob);
+void *open_blob_rw(const void *blob);
 
 #include "util.h"
 
diff -Naupr dtc-1.7.0/tests/testutils.c dtc/tests/testutils.c
--- dtc-1.7.0/tests/testutils.c	2023-02-09 11:01:35.000000000 +0100
+++ dtc/tests/testutils.c	2023-05-04 14:37:51.773667884 +0200
@@ -5,7 +5,9 @@
  * Copyright (C) 2006 David Gibson, IBM Corporation.
  */
 
+#ifndef _GNU_SOURCE
 #define _GNU_SOURCE /* for strsignal() in glibc.  FreeBSD has it either way */
+#endif
 
 #include <stdio.h>
 #include <stdlib.h>
@@ -17,7 +19,7 @@
 #include <unistd.h>
 #include <fcntl.h>
 
-#if NO_VALGRIND
+#ifdef NO_VALGRIND
 static inline void VALGRIND_MAKE_MEM_UNDEFINED(void *p, size_t len)
 {
 }
@@ -338,19 +340,14 @@ void save_blob(const char *filename, voi
 	free(tmp);
 }
 
-void *open_blob_rw(void *blob)
+void *open_blob_rw(const void *blob)
 {
 	int err;
-	void *buf = blob;
-
-	err = fdt_open_into(blob, buf, fdt_totalsize(blob));
-	if (err == -FDT_ERR_NOSPACE) {
-		/* Ran out of space converting to v17 */
-		int newsize = fdt_totalsize(blob) + 8;
+	void *buf;
+	int newsize = fdt_totalsize(blob) + 8;
 
-		buf = xmalloc(newsize);
-		err = fdt_open_into(blob, buf, newsize);
-	}
+	buf = xmalloc(newsize);
+	err = fdt_open_into(blob, buf, newsize);
 	if (err)
 		FAIL("fdt_open_into(): %s", fdt_strerror(err));
 	return buf;
diff -Naupr dtc-1.7.0/tests/utilfdt_test.c dtc/tests/utilfdt_test.c
--- dtc-1.7.0/tests/utilfdt_test.c	2023-02-09 11:01:35.000000000 +0100
+++ dtc/tests/utilfdt_test.c	2023-05-04 14:37:51.773667884 +0200
@@ -50,7 +50,7 @@ static void checkfail(const char *fmt)
  * \param expected_size	The size (in bytes) that we expect (ignored for
  *			strings)
  */
-static void check_sizes(char *modifier, int expected_size)
+static void check_sizes(const char *modifier, int expected_size)
 {
 	char fmt[10], *ptr;
 
diff -Naupr dtc-1.7.0/util.h dtc/util.h
--- dtc-1.7.0/util.h	2023-02-09 11:01:35.000000000 +0100
+++ dtc/util.h	2023-05-04 14:37:51.774667877 +0200
@@ -65,7 +65,7 @@ extern char *xstrndup(const char *s, siz
 
 extern int PRINTF(2, 3) xasprintf(char **strp, const char *fmt, ...);
 extern int PRINTF(2, 3) xasprintf_append(char **strp, const char *fmt, ...);
-extern int xavsprintf_append(char **strp, const char *fmt, va_list ap);
+extern int PRINTF(2, 0) xavsprintf_append(char **strp, const char *fmt, va_list ap);
 extern char *join_path(const char *path, const char *name);
 
 /**
diff -Naupr dtc-1.7.0/yamltree.c dtc/yamltree.c
--- dtc-1.7.0/yamltree.c	2023-02-09 11:01:35.000000000 +0100
+++ dtc/yamltree.c	2023-05-04 14:37:51.774667877 +0200
@@ -10,7 +10,7 @@
 #include "dtc.h"
 #include "srcpos.h"
 
-char *yaml_error_name[] = {
+const char *yaml_error_name[] = {
 	[YAML_NO_ERROR] = "no error",
 	[YAML_MEMORY_ERROR] = "memory error",
 	[YAML_READER_ERROR] = "reader error",
@@ -33,7 +33,7 @@ static void yaml_propval_int(yaml_emitte
 	char *data, unsigned int seq_offset, unsigned int len, int width)
 {
 	yaml_event_t event;
-	void *tag;
+	const void *tag;
 	unsigned int off;
 
 	switch(width) {
@@ -47,7 +47,7 @@ static void yaml_propval_int(yaml_emitte
 	assert(len % width == 0);
 
 	yaml_sequence_start_event_initialize(&event, NULL,
-		(yaml_char_t *)tag, width == 4, YAML_FLOW_SEQUENCE_STYLE);
+		(const yaml_char_t *)tag, width == 4, YAML_FLOW_SEQUENCE_STYLE);
 	yaml_emitter_emit_or_die(emitter, &event);
 
 	for (off = 0; off < len; off += width) {
@@ -80,11 +80,11 @@ static void yaml_propval_int(yaml_emitte
 
 		if (is_phandle)
 			yaml_scalar_event_initialize(&event, NULL,
-				(yaml_char_t*)"!phandle", (yaml_char_t *)buf,
+				(const yaml_char_t*)"!phandle", (const yaml_char_t *)buf,
 				strlen(buf), 0, 0, YAML_PLAIN_SCALAR_STYLE);
 		else
 			yaml_scalar_event_initialize(&event, NULL,
-				(yaml_char_t*)YAML_INT_TAG, (yaml_char_t *)buf,
+				(const yaml_char_t*)YAML_INT_TAG, (const yaml_char_t *)buf,
 				strlen(buf), 1, 1, YAML_PLAIN_SCALAR_STYLE);
 		yaml_emitter_emit_or_die(emitter, &event);
 	}
@@ -105,7 +105,7 @@ static void yaml_propval_string(yaml_emi
 		assert(isascii(str[i]));
 
 	yaml_scalar_event_initialize(&event, NULL,
-		(yaml_char_t *)YAML_STR_TAG, (yaml_char_t*)str,
+		(const yaml_char_t *)YAML_STR_TAG, (const yaml_char_t*)str,
 		len-1, 0, 1, YAML_DOUBLE_QUOTED_SCALAR_STYLE);
 	yaml_emitter_emit_or_die(emitter, &event);
 }
@@ -119,15 +119,15 @@ static void yaml_propval(yaml_emitter_t
 
 	/* Emit the property name */
 	yaml_scalar_event_initialize(&event, NULL,
-		(yaml_char_t *)YAML_STR_TAG, (yaml_char_t*)prop->name,
+		(const yaml_char_t *)YAML_STR_TAG, (const yaml_char_t*)prop->name,
 		strlen(prop->name), 1, 1, YAML_PLAIN_SCALAR_STYLE);
 	yaml_emitter_emit_or_die(emitter, &event);
 
 	/* Boolean properties are easiest to deal with. Length is zero, so just emit 'true' */
 	if (len == 0) {
 		yaml_scalar_event_initialize(&event, NULL,
-			(yaml_char_t *)YAML_BOOL_TAG,
-			(yaml_char_t*)"true",
+			(const yaml_char_t *)YAML_BOOL_TAG,
+			(const yaml_char_t*)"true",
 			strlen("true"), 1, 0, YAML_PLAIN_SCALAR_STYLE);
 		yaml_emitter_emit_or_die(emitter, &event);
 		return;
@@ -137,7 +137,7 @@ static void yaml_propval(yaml_emitter_t
 		die("No markers present in property '%s' value\n", prop->name);
 
 	yaml_sequence_start_event_initialize(&event, NULL,
-		(yaml_char_t *)YAML_SEQ_TAG, 1, YAML_FLOW_SEQUENCE_STYLE);
+		(const yaml_char_t *)YAML_SEQ_TAG, 1, YAML_FLOW_SEQUENCE_STYLE);
 	yaml_emitter_emit_or_die(emitter, &event);
 
 	for_each_marker(m) {
@@ -185,7 +185,7 @@ static void yaml_tree(struct node *tree,
 		return;
 
 	yaml_mapping_start_event_initialize(&event, NULL,
-		(yaml_char_t *)YAML_MAP_TAG, 1, YAML_ANY_MAPPING_STYLE);
+		(const yaml_char_t *)YAML_MAP_TAG, 1, YAML_ANY_MAPPING_STYLE);
 	yaml_emitter_emit_or_die(emitter, &event);
 
 	for_each_property(tree, prop)
@@ -194,7 +194,7 @@ static void yaml_tree(struct node *tree,
 	/* Loop over all the children, emitting them into the map */
 	for_each_child(tree, child) {
 		yaml_scalar_event_initialize(&event, NULL,
-			(yaml_char_t *)YAML_STR_TAG, (yaml_char_t*)child->name,
+			(const yaml_char_t *)YAML_STR_TAG, (const yaml_char_t*)child->name,
 			strlen(child->name), 1, 0, YAML_PLAIN_SCALAR_STYLE);
 		yaml_emitter_emit_or_die(emitter, &event);
 		yaml_tree(child, emitter);
@@ -217,7 +217,7 @@ void dt_to_yaml(FILE *f, struct dt_info
 	yaml_document_start_event_initialize(&event, NULL, NULL, NULL, 0);
 	yaml_emitter_emit_or_die(&emitter, &event);
 
-	yaml_sequence_start_event_initialize(&event, NULL, (yaml_char_t *)YAML_SEQ_TAG, 1, YAML_ANY_SEQUENCE_STYLE);
+	yaml_sequence_start_event_initialize(&event, NULL, (const yaml_char_t *)YAML_SEQ_TAG, 1, YAML_ANY_SEQUENCE_STYLE);
 	yaml_emitter_emit_or_die(&emitter, &event);
 
 	yaml_tree(dti->dt, &emitter);
